---
# Setup bastion machine to deploy an OCP cluster
#
# Example Usage:
#
# ansible-playbook -i ansible/inventory/cloud42.local ansible/setup-bastion.yml
#
- name: ensure bastion is powered on
  hosts: localhost
  vars:
    ssh_known_hosts_file: "{{ lookup('env','HOME') + '/.ssh/known_hosts' }}"
  vars_files:
  - vars/all.yml
  - vars/lab.yml
  tasks:
  - name: Set fact for bastion_machine
    set_fact:
      bastion_machine: "{{ groups['bastion'][0] }}"

  - name: Ensure bastion is powered on
    community.general.redfish_command:
      category: Systems
      command: PowerOn
      baseuri: "{{ hostvars[bastion_machine]['bmc_address'] }}"
      username: "{{ hostvars[bastion_machine]['bmc_user'] }}"
      password: "{{ hostvars[bastion_machine]['bmc_password'] }}"
    register: bastion_power

  - name: Wait if bastion has just been powered on
    wait_for_connection:
      delay: 60
      timeout: 420
    when: bastion_power.changed

  - name: For each host, scan for its ssh public key
    shell: "ssh-keyscan {{ item }},`dig +short {{ item }}`"
    with_items: "{{ bastion_machine }}"
    register: ssh_known_host_results
    ignore_errors: yes

  - name: Add/update the public key in the '{{ ssh_known_hosts_file }}'
    known_hosts:
      name: "{{ item.item }}"
      key: "{{ item.stdout }}"
      path: "{{ ssh_known_hosts_file }}"
    with_items: "{{ ssh_known_host_results.results }}"

- name: Setup bastion machine
  hosts: bastion
  vars_files:
  - vars/all.yml
  - vars/lab.yml
  roles:
  - validate-vars
  - bastion-install
  - bastion-network
  - bastion-dnsmasq
  - bastion-http
  - bastion-ocp-version
  - role: bastion-disconnected-registry
    when: use_disconnected_registry
  - role: disconnected-sync-ocp-release
    when: use_disconnected_registry
  - bastion-assisted-installer
  - role: bastion-disconnected-haproxy
    when: use_disconnected_registry
