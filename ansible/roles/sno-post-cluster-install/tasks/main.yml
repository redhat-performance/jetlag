---
# sno-post-cluster-install tasks

- name: Create directory for sno cluster configuration items
  file:
    path: "{{ bastion_cluster_config_dir }}"
    state: directory

- name: Create directories per sno cluster inside of the above directory
  file:
    path: "{{ bastion_cluster_config_dir }}/{{ item.key }}"
    state: directory
  loop: "{{ ai_cluster_ids | dict2items }}"

- name: Create net-attach-def directory per sno cluster
  file:
    path: "{{ bastion_cluster_config_dir }}/{{ item.key }}/net-attach-def"
    state: directory
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: setup_network_attachment_definition

- name: Create performance-profile directory per sno cluster
  file:
    path: "{{ bastion_cluster_config_dir }}/{{ item.key }}/performance-profile"
    state: directory
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: install_performance_addon_operator or du_profile

- name: Create tunedPerformancePatch directory per sno cluster
  file:
    path: "{{ bastion_cluster_config_dir }}/{{ item.key }}/tunedPerformancePatch"
    state: directory
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: install_performance_addon_operator or du_profile

- name: Place templated net-attachment-definition
  template:
    src: network-attachment-definition.yml.j2
    dest: "{{ bastion_cluster_config_dir }}/{{ item.key }}/net-attach-def/network-attachment-definition.yml"
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: setup_network_attachment_definition

- name: Get credentials (kubeconfig) from installed cluster(s)
  get_url:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v1/clusters/{{ item.value.cluster_id }}/downloads/files?file_name=kubeconfig"
    dest: "{{ bastion_cluster_config_dir }}/{{ item.key }}/kubeconfig"
  loop: "{{ ai_cluster_ids | dict2items }}"

- name: Get credentials (kubeadmin-password) from installed cluster(s)
  get_url:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v1/clusters/{{ item.value.cluster_id }}/downloads/files?file_name=kubeadmin-password"
    dest: "{{ bastion_cluster_config_dir }}/{{ item.key }}/kubeadmin-password"
  loop: "{{ ai_cluster_ids | dict2items }}"

- name: Apply a label to the worker node(s)
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ item.key }}/kubeconfig oc label no --all --overwrite jetlag=true
  loop: "{{ ai_cluster_ids | dict2items }}"

- name: Add kube-burner sa
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ item.key }}/kubeconfig oc create sa kubeburner
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: setup_kube_burner_sa | default(true) | bool

- name: Add cluster-admin role to kube-burner sa
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ item.key }}/kubeconfig oc adm policy add-cluster-role-to-user -z kubeburner cluster-admin
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: setup_kube_burner_sa | default(true) | bool

- name: Disable default OperatorHub sources on disconnected clusters
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ item.key }}/kubeconfig oc patch OperatorHub cluster --type json -p '[{"op": "add", "path": "/spec/disableAllDefaultSources", "value": true}]'
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: use_disconnected_registry | default(false)

- name: Apply olm-mirror imageContentSourcePolicy on disconnected clusters
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ item.key }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/olm-mirror-{{ operator_index_name }}-{{ operator_index_tag }}/imageContentSourcePolicy.yaml
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: use_disconnected_registry | default(false)

- name: Apply olm-mirror catalogSource on disconnected clusters
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ item.key }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/olm-mirror-{{ operator_index_name }}-{{ operator_index_tag }}/catalogSource.yaml
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: use_disconnected_registry | default(false)

- name: Setup NetworkAttachmentDefinition for 2nd pod network (macvlan type only)
  when: setup_network_attachment_definition
  shell:
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ item.key }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/{{ item.key }}/net-attach-def/network-attachment-definition.yml
  loop: "{{ ai_cluster_ids | dict2items }}"

- name: Disable Network Diagnostics - Place DisableSnoNetworkDiag CR
  template:
    src: DisableSnoNetworkDiag.yaml
    dest: "{{ bastion_cluster_config_dir }}/{{ item.key }}/DisableSnoNetworkDiag.yaml"
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: du_profile

- name: Disable Network Diagnostics - Apply CR
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ item.key }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/{{ item.key }}/DisableSnoNetworkDiag.yaml
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: du_profile

- name: Install Performance-Addon-Operator - find channel
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ item.key }}/kubeconfig oc get packagemanifest performance-addon-operator -n openshift-marketplace -o jsonpath='{.status.defaultChannel}'
  register: channel
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: install_performance_addon_operator

- name: Install Performance-Addon-Operator - Store channel in var
  set_fact:
    ocp_channel: "{{ channel.results[0].stdout }}"
  when: install_performance_addon_operator

- name: Install Performance-Addon-Operator - Place templated PAO namespace, OperatorGroup and subscription
  template:
    src: performance-addon-operator.yml.j2
    dest: "{{ bastion_cluster_config_dir }}/{{ item.key }}/performance-profile/performance-addon-operator.yml"
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: install_performance_addon_operator

- name: Install Performance-Addon-Operator - create PAO namespace, OperatorGroup and subscription
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ item.key }}/kubeconfig oc create -f {{ bastion_cluster_config_dir }}/{{ item.key }}/performance-profile/performance-addon-operator.yml
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: install_performance_addon_operator

- name: Place templated PerformanceProfile
  template:
    src: performance-profile.yml.j2
    dest: "{{ bastion_cluster_config_dir }}/{{ item.key }}/performance-profile/performance-profile.yml"
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: du_profile

- name: Place templated TunedPerformancePatch
  template:
    src: tunedPerformancePatch.yml.j2
    dest: "{{ bastion_cluster_config_dir }}/{{ item.key }}/tunedPerformancePatch/tunedPerformancePatch.yml"
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: du_profile

- name: Apply the PerformanceProfile
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ item.key }}/kubeconfig oc create -f {{ bastion_cluster_config_dir }}/{{ item.key }}/performance-profile/performance-profile.yml
  register: perf_result
  retries: 120
  delay: 2
  until: not perf_result.failed
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: du_profile

- name: Wait until MachineConfigPools are updating
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ item.key }}/kubeconfig oc get mcp --no-headers master | awk '{print $4}'
  register: result
  delay: 2
  retries: 120
  until: result.stdout == "True"
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: du_profile

- name: Wait until MachineConfigPools are updated
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ item.key }}/kubeconfig oc get mcp --no-headers master | awk '{print $3}'
  register: result
  delay: 10
  retries: 180
  until: result.stdout == "True"
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: du_profile

- name: Apply the TunedPerformancePatch
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ item.key }}/kubeconfig oc create -f {{ bastion_cluster_config_dir }}/{{ item.key }}/tunedPerformancePatch/tunedPerformancePatch.yml
  register: tunedpatch_result
  retries: 120
  delay: 2
  until: not tunedpatch_result.failed
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: du_profile

- name: Wait until MachineConfigPools are updating
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ item.key }}/kubeconfig oc get mcp --no-headers master | awk '{print $4}'
  register: result
  delay: 2
  retries: 120
  until: result.stdout == "True"
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: du_profile

- name: Wait until MachineConfigPools are updated
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ item.key }}/kubeconfig oc get mcp --no-headers master | awk '{print $3}'
  register: result
  delay: 10
  retries: 180
  until: result.stdout == "True"
  loop: "{{ ai_cluster_ids | dict2items }}"
  when: du_profile
