---
# sno-post-cluster-install tasks

- name: Create directories for sno cluster configuration items
  file:
    path: "{{ item }}"
    state: directory
  loop:
  - "{{ bastion_cluster_config_dir }}"
  - "{{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}"
  - "{{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/gitops"
  - "{{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/localstorage"
  - "{{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/metal3"
  - "{{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/minio"
  - "{{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/performance-profile"
  - "{{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/tunedPerformancePatch"

- name: Get credentials (kubeconfig and kubeadmin password) from installed cluster
  get_url:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v2/clusters/{{ ai_cluster_id }}/downloads/credentials?file_name={{ item.name }}"
    dest: "{{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/{{ item.dest }}"
  loop:
  - name: kubeadmin-password
    dest: kubeadmin-password
  - name: kubeconfig
    dest: kubeconfig
  - name: kubeconfig
    dest: kubeconfig.backup

- name: Apply a label to the SNO node
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/kubeconfig oc label no --all --overwrite jetlag=true
  register: jetlag_label
  retries: 120
  delay: 2
  until: not jetlag_label.failed

- name: Place templated configuration items
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
  - src: openshift-gitops-operator.yml.j2
    dest: "{{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/gitops/openshift-gitops-operator.yml"
  - src: localstorage.yml.j2
    dest: "{{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/localstorage/localstorage.yml"
  - src: localvolume.yml.j2
    dest: "{{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/localstorage/localvolume.yml"
  - src: localvolume2.yml.j2
    dest: "{{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/localstorage/localvolume2.yml"
  - src: minio.yml.j2
    dest: "{{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/minio/minio.yml"
  - src: metal3.yml
    dest: "{{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/metal3/metal3.yml"
  - src: openshift-marketplace-ns.yaml
    dest: "{{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/openshift-marketplace-ns.yaml"

- name: Add kube-burner sa
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/kubeconfig oc create sa kubeburner
  register: kubeburner_sa
  retries: 120
  delay: 2
  until: not kubeburner_sa.failed
  when: setup_kube_burner_sa | default(true) | bool

- name: Add cluster-admin role to kube-burner sa
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/kubeconfig oc adm policy add-cluster-role-to-user -z kubeburner cluster-admin
  register: kubeburner_role
  retries: 120
  delay: 2
  until: not kubeburner_role.failed
  when: setup_kube_burner_sa | default(true) | bool

- name: Disable default OperatorHub sources on bastion registry clusters
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/kubeconfig oc patch OperatorHub cluster --type json -p '[{"op": "add", "path": "/spec/disableAllDefaultSources", "value": true}]'
  register: operator_hub_disable
  retries: 120
  delay: 2
  until: not operator_hub_disable.failed
  when:
  - use_bastion_registry | default(false)

- name: Create openshift-marketplace namespace for ocp 4.15 and higher releases DUs
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/openshift-marketplace-ns.yaml
  register: marketplace_ns
  retries: 120
  delay: 2
  until: not marketplace_ns.failed
  when:
  - use_bastion_registry | default(false)
  - openshift_version is version('4.15', ">=")

- name: Apply olm-mirror imageContentSourcePolicy on bastion registry clusters
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/olm-mirror-{{ operator_index_name }}-{{ operator_index_tag }}/imageContentSourcePolicy.yaml
  register: icsp_apply
  retries: 120
  delay: 2
  until: not icsp_apply.failed
  when: use_bastion_registry | default(false)

# Part of DU Profile (Not completely in du_profile_tasks.yml)
- name: Annotate catalogSource.yaml to pin opm to reserved cores for DUs
  shell: |
    yq -i '.metadata.annotations."target.workload.openshift.io/management" = "{\"effect\": \"PreferredDuringScheduling\"}"' {{ bastion_cluster_config_dir }}/olm-mirror-{{ operator_index_name }}-{{ operator_index_tag }}/catalogSource.yaml
  register: catsource_annotate
  retries: 120
  delay: 2
  until: not catsource_annotate.failed
  when: use_bastion_registry | default(false) and du_profile

- name: Apply olm-mirror catalogSource on bastion registry clusters
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/olm-mirror-{{ operator_index_name }}-{{ operator_index_tag }}/catalogSource.yaml
  register: catsource_apply
  retries: 120
  delay: 2
  until: not catsource_apply.failed
  when: use_bastion_registry | default(false)

- name: Install OpenShift-gitops-operator
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/gitops/openshift-gitops-operator.yml
  when: setup_openshift_gitops

- name: Setup nodes localstorage
  when: sno_localstorage_configuration
  block:
  - name: Install local-storage operator
    shell:
      KUBECONFIG={{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/localstorage/localstorage.yml

  # The localvolume resource will not be instantly available, thus retry for around 2 minutes
  - name: Create localvolume resource
    shell:
      KUBECONFIG={{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/localstorage/localvolume.yml
    register: lv_result
    until: not lv_result.failed
    retries: 60
    delay: 2

  - name: Create localvolume2 resource
    shell:
      KUBECONFIG={{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/localstorage/localvolume2.yml
    register: lv_result
    until: not lv_result.failed
    retries: 60
    delay: 2
    when: localvolume2_configuration

- name: Setup Minio
  when: setup_minio | bool
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/minio/minio.yml

- name: Setup Metal3
  when: sno_metal3 | bool
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/{{ groups['sno'][0] }}/metal3/metal3.yml

- name: Include DU Profile tasks
  include_tasks: du_profile_post_install_tasks.yml
  when: du_profile
