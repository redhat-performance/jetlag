---
# check-cluster-install tasks
#
# Check if cluster completed install
# * If error exit loop
# * If complete exit loop
# * If not complete, continue to loop
# Check if any hosts in incorrect boot order state
# Unmount CD and reboot incorrect boot order hosts
# Ensure not to reboot same machine repeatedly
# Repeat loop

- name: Check cluster install task block
  block:
  - name: Increment the retry count
    set_fact:
      retry: "{{ 0 if retry is undefined else retry | int + 1 }}"

  - name: Display the retry count
    debug:
      msg: "Retry number - {{ retry }}"

  - name: Check if cluster is installed
    uri:
      url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v1/clusters/{{ ai_cluster_id }}"
      method: GET
      status_code: [200, 201]
      return_content: true
    register: cluster
    failed_when: cluster.json.status == 'error' or cluster.json.status == 'cancelled'

  - name: Get cluster hosts
    uri:
      url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v1/clusters/{{ ai_cluster_id }}/hosts"
      method: GET
      body_format: json
      status_code: [200]
      return_content: true
    register: get_hosts
    when: not cluster.json.status == 'installed'

  - name: Supermicro Fix hosts with incorrect boot order by unmounting virtual media
    include_tasks: supermicro-unmount-virtual-media.yml
    loop: "{{ get_hosts.json|selectattr('status', 'eq', 'installing-pending-user-action') }}"
    when:
    - not cluster.json.status == 'installed'
    - item.requested_hostname not in boot_order_fixed_hosts
    - hostvars[item.requested_hostname]['vendor'] == 'Supermicro'

  - name: Lenovo Fix hosts with incorrect boot order by unmounting virtual media
    include_tasks: lenovo-unmount-virtual-media.yml
    loop: "{{ get_hosts.json|selectattr('status', 'eq', 'installing-pending-user-action') }}"
    when:
    - not cluster.json.status == 'installed'
    - item.requested_hostname not in boot_order_fixed_hosts
    - hostvars[item.requested_hostname]['vendor'] == 'Lenovo'

  - name: Append host with unmounted virtual media to boot order fixed hosts list
    set_fact:
      boot_order_fixed_hosts: "{{ boot_order_fixed_hosts + [item.requested_hostname] }}"
    loop: "{{ get_hosts.json|selectattr('status', 'eq', 'installing-pending-user-action') }}"
    when:
    - not cluster.json.status == 'installed'
    - item.requested_hostname not in boot_order_fixed_hosts

  - name: Unmount virtual media from machines in status error
    when: unmount_virtual_media_on_error
    block:
    - name: Supermicro Fix hosts with incorrect boot order by unmounting virtual media
      include_tasks: supermicro-unmount-virtual-media.yml
      loop: "{{ get_hosts.json|selectattr('status', 'eq', 'error') }}"
      when:
      - not cluster.json.status == 'installed'
      - item.requested_hostname not in boot_order_fixed_hosts
      - hostvars[item.requested_hostname]['vendor'] == 'Supermicro'

    - name: Lenovo Fix hosts with incorrect boot order by unmounting virtual media
      include_tasks: lenovo-unmount-virtual-media.yml
      loop: "{{ get_hosts.json|selectattr('status', 'eq', 'error') }}"
      when:
      - not cluster.json.status == 'installed'
      - item.requested_hostname not in boot_order_fixed_hosts
      - hostvars[item.requested_hostname]['vendor'] == 'Lenovo'

    - name: Append host with unmounted virtual media to boot order fixed hosts list
      set_fact:
        boot_order_fixed_hosts: "{{ boot_order_fixed_hosts + [item.requested_hostname] }}"
      loop: "{{ get_hosts.json|selectattr('status', 'eq', 'error') }}"
      when:
      - not cluster.json.status == 'installed'
      - item.requested_hostname not in boot_order_fixed_hosts

  - name: Pause during loop
    pause:
      seconds: "{{ check_cluster_pause_seconds }}"

  # - name: Hosts which have had a boot order fix applied
  #   debug:
  #     msg: "{{ boot_order_fixed_hosts }}"

  - name: Fail for a repeat check if cluster not installed
    fail:
      msg: Cluster not finished installing
    when: not cluster.json.status == 'installed'

  rescue:
    - name: Fail on maximum retry count
      fail:
        msg: Maximum retries reached
      when: retry | int == 540

    - name: Fail when cluster install failed
      fail:
        msg: Cluster install failed or cancelled
      when: cluster.json.status == 'error' or cluster.json.status == 'cancelled'

    - name: Retry the check cluster install tasks
      include_tasks: check-cluster-install.yml
