---
# sno-create-ai-cluster tasks

- name: Obtain pull-secret for bastion registry
  slurp:
    src: "{{ registry_path }}/pull-secret-bastion.txt"
  register: slurped_pull_secret
  when: use_bastion_registry

- name: Set pull-secret for bastion registry
  set_fact:
    pull_secret: "{{ slurped_pull_secret.content | b64decode }}"
  when: use_bastion_registry

- name: Obtain bastion registry certificate
  slurp:
    src: "{{ registry_path }}/certs/domain.crt"
  register: mirror_cert
  when: use_bastion_registry

- name: Create each SNO and infra-env
  include_tasks: create_individual_sno.yml
  loop: "{{ groups['sno'][:1] }}"

# - debug:
#     msg: "{{ ai_cluster_ids }}"

- name: set machine network cidr for public vlan
  set_fact:
    machine_network_cidr: "{{ controlplane_pub_network_cidr }}"
  when:
  - public_vlan | bool

- name: set machine network cidr when using bastion registry
  set_fact:
    machine_network_cidr: "{{ controlplane_network | ipaddr('network/prefix') }}"
  when:
  - use_bastion_registry

- block:
  - name: Set machine network
    set_fact:
      machine_network: "{{ ansible_default_ipv4.address }}/{{ ansible_default_ipv4.netmask }}"

  - name: Set machine network CIDR
    set_fact:
      machine_network_cidr: "{{ machine_network | ipaddr('network/prefix') }}"
  when:
  - ( machine_network_cidr is not defined ) or ( not machine_network_cidr )

- name: Update machine CIDR
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v2/clusters/{{ ai_cluster_ids[item].cluster_id }}"
    method: PATCH
    body_format: json
    status_code: [201]
    return_content: true
    body: {
        "machine_network_cidr": "{{ machine_network_cidr }}"
    }
  with_items: "{{ ai_cluster_ids }}"

- name: Add entries in /etc/hosts
  blockinfile:
    path: "/etc/hosts"
    backup: true
    block: |
      {{ hostvars[item].ip }} api.{{ hostvars[item].inventory_hostname }}.{{ base_dns_name }}
      {{ hostvars[item].ip }} api-int.{{ hostvars[item].inventory_hostname }}.{{ base_dns_name }}
      {% for route in etc_hosts_ingress_routes %}
      {{ hostvars[item].ip }} {{ route }}.apps.{{ hostvars[item].inventory_hostname }}.{{ base_dns_name }}
      {% endfor %}
      {% if public_vlan %}
      {{ hostvars[item].ip }} {{ hostvars[item].inventory_hostname }} # SNO node
      {%- endif %}
    insertafter: "EOF"
    marker: "# {mark} {{ hostvars[item].inventory_hostname }} OCP CLUSTER MANAGED BLOCK"
  loop: "{{ groups['sno'][:1] }}"

- name: Restart dnsmasq after /etc/hosts update
  systemd:
    state: restarted
    name: dnsmasq
  when:
  - controlplane_bastion_as_dns
  - not setup_coredns

- name: Include custom manifests
  include_tasks: 01_manifest_task.yml
  with_items: "{{ ai_cluster_ids }}"
  loop_control:
    loop_var: outer_item
