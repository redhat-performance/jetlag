---
# sno-create-ai-cluster tasks

- name: Obtain pull-secret for bastion registry
  slurp:
    src: "{{ registry_path }}/pull-secret-bastion.txt"
  register: slurped_pull_secret
  when: use_bastion_registry

- name: Set pull-secret for bastion registry
  set_fact:
    pull_secret: "{{ slurped_pull_secret.content | b64decode }}"
  when: use_bastion_registry

- name: Obtain bastion registry certificate
  slurp:
    src: "{{ registry_path }}/certs/domain.crt"
  register: mirror_cert
  when: use_bastion_registry

- name: (RH Lab) Assemble SNO static network config
  set_fact:
    static_network_config:
    - network_yaml: "{{ lookup('template', 'nmstate.yml.j2') }}"
      mac_interface_map: "{{ lookup('template', 'mac_interface_map.json.j2')  }}"
  when:
  - lab in rh_labs
  - use_bastion_registry

- name: (Cloud lab) Assemble SNO static network config
  set_fact:
    static_network_config:
    - network_yaml: "{{ lookup('template', 'ibmcloud_nmstate.yml.j2') }}"
      mac_interface_map: "{{ lookup('template', 'ibmcloud_mac_interface_map.json.j2')  }}"
  when: lab in cloud_labs

# - debug:
#     msg: "{{ static_network_config }}"

- name: Create SNO cluster
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v2/clusters"
    method: POST
    body_format: json
    status_code: [201]
    return_content: true
    body: {
        "name": "{{ groups['sno'][0] }}",
        "openshift_version": "{{ openshift_version }}",
        "high_availability_mode": "None",
        "base_dns_domain": "{{ base_dns_name }}",
        "cluster_network_cidr": "{{ cluster_network_cidr }}",
        "cluster_network_host_prefix": "{{ cluster_network_host_prefix }}",
        "service_network_cidr": "{{ service_network_cidr }}",
        "pull_secret": "{{ pull_secret | to_json }}",
        "ssh_public_key": "{{ lookup('file', ssh_public_key_file) }}",
        "additional_ntp_source": "{{ bastion_controlplane_ip if (lab in cloud_labs) or use_bastion_registry else labs[lab]['ntp_server'] }}"
    }
  register: create_cluster_return

- name: Set ai_cluster_id
  set_fact:
    ai_cluster_id: "{{ create_cluster_return.json.id }}"

# No static_network_config as a connected SNO uses the DHCP lab interface
- name: Create a connected infra-env
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v2/infra-envs"
    method: POST
    body_format: json
    status_code: [201]
    return_content: true
    body: {
        "name": "{{ groups['sno'][0] }}",
        "additional_ntp_sources": "{{ bastion_controlplane_ip if (lab in cloud_labs) or use_bastion_registry else labs[lab]['ntp_server'] }}",
        "ssh_authorized_key": "{{ lookup('file', ssh_public_key_file) }}",
        "pull_secret": "{{ pull_secret | to_json }}",
        "image_type": "full-iso",
        "cluster_id": "{{ ai_cluster_id }}",
        "openshift_version": "{{ openshift_version }}",
    }
  register: create_infra_env_return

- name: Set ai_infraenv_id
  set_fact:
    ai_infraenv_id: "{{ create_infra_env_return.json.id }}"

- name: Patch infra-env for bastion registry with ignition config overrides
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v2/infra-envs/{{ ai_infraenv_id }}"
    method: PATCH
    body_format: json
    status_code: [201]
    return_content: true
    body: {
        "ignition_config_override": "{{ lookup('template', 'disconnected-discovery.ign.j2') | to_json }}",
        "static_network_config": "{{ static_network_config }}"
    }
  when: use_bastion_registry

- name: Patch infra-env for cloud labs with static network config
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v2/infra-envs/{{ ai_infraenv_id }}"
    method: PATCH
    body_format: json
    status_code: [201]
    return_content: true
    body: {
        "static_network_config": "{{ static_network_config }}"
    }
  when: lab in cloud_labs

- name: set machine network cidr for public vlan
  set_fact:
    machine_network_cidr: "{{ controlplane_pub_network_cidr }}"
  when:
  - public_vlan | bool

- name: set machine network cidr when using bastion registry
  set_fact:
    machine_network_cidr: "{{ controlplane_network | ipaddr('network/prefix') }}"
  when:
  - use_bastion_registry

- block:
  - name: Set machine network
    set_fact:
      machine_network: "{{ ansible_default_ipv4.address }}/{{ ansible_default_ipv4.netmask }}"

  - name: Set machine network CIDR
    set_fact:
      machine_network_cidr: "{{ machine_network | ipaddr('network/prefix') }}"
  when:
  - ( machine_network_cidr is not defined ) or ( not machine_network_cidr )

- name: Update machine CIDR
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v2/clusters/{{ ai_cluster_id }}"
    method: PATCH
    body_format: json
    status_code: [201]
    return_content: true
    body: {
        "machine_network_cidr": "{{ machine_network_cidr }}"
    }

- name: Add entries in /etc/hosts
  blockinfile:
    path: "/etc/hosts"
    backup: true
    block: |
      {{ hostvars[groups['sno'][0]].ip }} api.{{ groups['sno'][0] }}.{{ base_dns_name }}
      {{ hostvars[groups['sno'][0]].ip }} api-int.{{ groups['sno'][0] }}.{{ base_dns_name }}
      {% for route in etc_hosts_ingress_routes %}
      {{ hostvars[groups['sno'][0]].ip }} {{ route }}.apps.{{ groups['sno'][0] }}.{{ base_dns_name }}
      {% endfor %}
      {% if public_vlan %}
      {{ hostvars[groups['sno'][0]].ip }} {{ groups['sno'][0] }} # SNO node
      {%- endif %}
    insertafter: "EOF"
    marker: "# {mark} {{ groups['sno'][0] }} OCP CLUSTER MANAGED BLOCK"

- name: Restart dnsmasq after /etc/hosts update
  systemd:
    state: restarted
    name: dnsmasq
  when:
  - controlplane_bastion_as_dns
  - not setup_coredns

- name: Include custom manifests
  include_role:
    name: create-ai-cluster
    tasks_from: 01_manifest_update.yml
  loop:
  - file_name: 50-controlplane-disable-lab-dhcp-interface.yaml
    template_name: "50-controlplane-disable-lab-dhcp-interface.yml.j2"
    enabled: "{{ public_vlan | bool }}"
  - file_name: 06-kdump-master.yaml
    template_name: 06-kdump-master.yaml
    enabled: "{{ kdump_master_config }}"
  - file_name: kubeletconfig-max-pods.yml
    template_name: kubeletconfig-max-pods.yml
    enabled: "{{ kubelet_config and not du_profile }}"
  vars:
    kubelet_config_max_pods_label: "pools.operator.machineconfiguration.openshift.io/master: ''"

- name: Include DU Profile manifests
  include_tasks: du_profile_manifest_tasks.yml
  when: du_profile
