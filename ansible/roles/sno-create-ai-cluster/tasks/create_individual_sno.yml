---
# Separate tasks to create an SNO and infraenv and join under one dictionary

- name: Set empty static network configuration
  set_fact:
    static_network_config: []

- name: Assemble controlplane static network config
  set_fact:
    item_network_config:
      network_yaml: "{{ lookup('template', 'nmstate.yml.j2') }}"
      mac_interface_map: "{{ lookup('template', 'mac_interface_map.json.j2')  }}"
  when:
  - lab in rh_labs
  - use_bastion_registry

- name: Assemble controlplane static network config
  set_fact:
    item_network_config:
      network_yaml: "{{ lookup('template', 'ibmcloud_nmstate.yml.j2') }}"
      mac_interface_map: "{{ lookup('template', 'ibmcloud_mac_interface_map.json.j2')  }}"
  when:
  - lab in rh_labs
  - use_bastion_registry

- name: Add {{ item }} ip config
  set_fact:
    static_network_config: "{{ static_network_config + [ item_network_config ] }}"
  when:
  - use_bastion_registry

- name: Create SNO cluster
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v2/clusters"
    method: POST
    body_format: json
    status_code: [201]
    return_content: true
    body: {
        "name": "{{ hostvars[item].inventory_hostname }}",
        "openshift_version": "{{ openshift_version }}",
        "high_availability_mode": "None",
        "base_dns_domain": "{{ base_dns_name }}",
        "cluster_network_cidr": "{{ cluster_network_cidr }}",
        "cluster_network_host_prefix": "{{ cluster_network_host_prefix }}",
        "service_network_cidr": "{{ service_network_cidr }}",
        "pull_secret": "{{ pull_secret | to_json }}",
        "ssh_public_key": "{{ lookup('file', ssh_public_key_file) }}",
        "additional_ntp_source": "{{ bastion_controlplane_ip if use_bastion_registry else labs[lab]['ntp_server'] }}"
    }
  register: create_cluster_return

- name: Set ai_cluster_id
  set_fact:
    ai_cluster_id: "{{ create_cluster_return.json.id }}"

# No static_network_config as a connected SNO uses the DHCP lab interface
- name: Create a connected infra-env
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v2/infra-envs"
    method: POST
    body_format: json
    status_code: [201]
    return_content: true
    body: {
        "name": "{{ hostvars[item].inventory_hostname }}",
        "additional_ntp_sources": "{{ bastion_controlplane_ip if use_bastion_registry else labs[lab]['ntp_server'] }}",
        "ssh_authorized_key": "{{ lookup('file', ssh_public_key_file) }}",
        "pull_secret": "{{ pull_secret | to_json }}",
        "image_type": "full-iso",
        "cluster_id": "{{ ai_cluster_id }}",
        "openshift_version": "{{ openshift_version }}",
    }
  register: create_infra_env_return

- name: Set ai_infraenv_id
  set_fact:
    ai_infraenv_id: "{{ create_infra_env_return.json.id }}"

- name: Patch infra-env for bastion registry with ignition config overrides
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v2/infra-envs/{{ ai_infraenv_id }}"
    method: PATCH
    body_format: json
    status_code: [201]
    return_content: true
    body: {
        "static_network_config": "{{ static_network_config }}",
        "ignition_config_override": "{{ lookup('template', 'disconnected-discovery.ign.j2') | to_json }}",
    }
  when: use_bastion_registry | default(false)

- name: Append cluster ids
  set_fact:
    ai_cluster_ids: "{{ ai_cluster_ids|default({}) | combine( {hostvars[item].inventory_hostname: {'cluster_name': hostvars[item].inventory_hostname, 'cluster_id': ai_cluster_id, 'infraenv_id': ai_infraenv_id} } ) }}"
