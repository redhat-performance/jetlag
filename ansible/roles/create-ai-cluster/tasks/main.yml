---
# create-ai-cluster tasks

- name: Obtain pull-secret for disconnected
  slurp:
    src: "{{ registry_path }}/pull-secret-disconnected.txt"
  register: slurped_pull_secret
  when: use_disconnected_registry

- name: Set pull-secret for disconnected
  set_fact:
    pull_secret: "{{ slurped_pull_secret.content | b64decode }}"
  when: use_disconnected_registry

- name: Create cluster
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v1/clusters"
    method: POST
    body_format: json
    status_code: [201]
    return_content: true
    body: {
        "name": "{{ cluster_name }}",
        "openshift_version": "{{ openshift_version }}",
        "base_dns_domain": "{{ base_dns_name }}",
        "cluster_network_cidr": "{{ cluster_network_cidr }}",
        "cluster_network_host_prefix": "{{ cluster_network_host_prefix }}",
        "service_network_cidr": "{{ service_network_cidr }}",
        "ingress_vip": "{{ controlplane_network_ingress }}",
        "pull_secret": "{{ pull_secret | to_json }}",
        "ssh_public_key": "{{ lookup('file', ssh_public_key_file) }}",
        "vip_dhcp_allocation": "{{ vip_dhcp_allocation }}",
        "additional_ntp_source": "{{ labs[lab]['ntp_server'] }}"
    }
  register: create_cluster_return

- name: Set cluster ID
  set_fact:
    ai_cluster_id: "{{ create_cluster_return.json.id }}"

- name: Add entries in /etc/hosts
  blockinfile:
    path: "/etc/hosts"
    backup: true
    block: |
      {{ controlplane_network_api }} api.{{ cluster_name }}.{{ base_dns_name }}
      {{ controlplane_network_api }} api-int.{{ cluster_name }}.{{ base_dns_name }}
      {% for route in etc_hosts_ingress_routes %}
      {{ controlplane_network_ingress }} {{ route }}.apps.{{ cluster_name }}.{{ base_dns_name }}
      {% endfor %}
    insertafter: "EOF"
    marker: "# {mark} {{ cluster_name }} OCP CLUSTER MANAGED BLOCK"

- name: Restart dnsmasq after /etc/hosts update
  systemd:
    state: restarted
    name: dnsmasq
  when: controlplane_bastion_as_dns

- name: Include custom manifests
  include_tasks: 01_manifest_update.yml
  with_items:
  - file_name: 50-controlplane-disable-lab-dhcp-interface.yaml
    template_name: "50-controlplane-disable-lab-dhcp-interface.yml.j2"
  - file_name: 50-worker-disable-lab-dhcp-interface.yaml
    template_name: "50-worker-disable-lab-dhcp-interface.yml.j2"
  - file_name: 99-master-kdump.yml
    template_name: 99-master-kdump.yml
    enabled: "{{ kdump_master_config }}"
  - file_name: kubeletconfig-max-pods.yml
    template_name: kubeletconfig-max-pods.yml
    enabled: "{{ kubelet_config }}"
  - file_name: rhacm-iscp.yml
    template_name: rhacm-icsp.yml
    enabled: "{{ rhacm_add_acm_d_icsp_manifest }}"

- name: RWN - Get OpenShift versions to obtain coredns image
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v1/openshift_versions"
    method: GET
    status_code: [200, 201]
    return_content: true
  register: versions
  when: cluster_type == "rwn"

- name: RWN - Obtain coredns image for this specific OpenShift version
  shell: |
    oc adm release info {{ versions.json[openshift_version]['release_image'] }} --image-for=coredns
  register: coredns_version_output
  when:
  - cluster_type == "rwn"
  - '"registry.ci.openshift.org" not in versions.json[openshift_version]["release_image"]'

- name: RWN - Set coredns image for released version
  set_fact:
    coredns_image: "{{ coredns_version_output.stdout }}"
  when:
  - cluster_type == "rwn"
  - '"registry.ci.openshift.org" not in versions.json[openshift_version]["release_image"]'

- name: RWN - Set coredns image (registry.ci.openshift.org)
  set_fact:
    coredns_image: "quay.io/openshift/origin-coredns:{{ openshift_version }}"
  when:
  - cluster_type == "rwn"
  - '"registry.ci.openshift.org" in versions.json[openshift_version]["release_image"]'

- name: RWN - Add additional manifest for remote worker node cluster
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v1/clusters/{{ ai_cluster_id }}/manifests"
    method: POST
    body_format: json
    status_code: [201]
    body: {
        "folder": "manifests",
        "file_name": "50-worker-fix-ipi-rwn.yaml",
        "content": "{{ lookup('template', './50-worker-fix-ipi-rwn.yml.j2') | b64encode }}"
    }
  when: cluster_type == "rwn"
