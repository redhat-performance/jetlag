---
# bastion-install tasks

- name: Create directory for bastion config
  file:
    path: "{{ bastion_cluster_config_dir }}"
    state: directory

- name: Install packages
  yum:
    name:
    - dnsmasq
    - frr
    - git
    - httpd
    - httpd-tools
    - ipmitool
    - iproute-tc
    - jq
    - net-tools
    - podman
    - python3
    - skopeo
    - tcpdump
    - tmux
    state: present
    update_cache: true
    disable_gpg_check: yes

- name: Scale / Alias lab bastion tasks
  when: lab in rh_labs
  block:
  - name: Clean lab interfaces
    shell: |
      /root/clean-interfaces.sh --nuke

  - name: Restart NetworkManager to remove lab interfaces
    systemd:
      state: restarted
      name: NetworkManager

  - name: Check if ssh keys exists
    stat:
      path: /root/.ssh/id_rsa
    register: ssh_key_result

  - name: Create ssh key pair
    shell: |
      ssh-keygen -q -t rsa -f /root/.ssh/id_rsa -C "" -N ""
    when: not ssh_key_result.stat.exists

  # Ansible isn't available on the IBMCloud RHEL/Centos bare-metal machine for unknown reasons at this moment
  - name: Install ansible
    yum:
      name:
      - ansible
      state: present
      update_cache: true
      disable_gpg_check: yes

  - name: Install kernel modules
    yum:
      name:
      - kernel-modules-extra
      - kernel-debug-modules-extra
      state: present
      update_cache: true
      disable_gpg_check: yes
    register: kernel_modules_installed
    when: bastion_install_tc_reboot

  - name: Reboot if kernel modules installed
    when:
    - bastion_install_tc_reboot
    - kernel_modules_installed.changed
    block:
    - name: Reboot bastion
      shell: "sleep 5; reboot now"
      async: 1
      poll: 0
      ignore_errors: true

    - name: Wait for machine rebooting
      wait_for:
        port: 22
        delay: 2
        state: stopped
        host: "{{ inventory_hostname }}"
      delegate_to: localhost

    - name: Wait for machine to be ready after reboot
      wait_for_connection:
        delay: 120
        timeout: 1200

- name: IBMcloud bastion install tasks
  when: lab in cloud_labs
  block:
  - name: Copy ssh keys to bastion
    copy:
      content: "{{ item.content }}"
      dest: "{{ item.dest }}"
      mode: "{{ item.mode }}"
    loop:
    - content: "{{ lookup('file', ssh_private_key_file) + '\n' }}"
      dest: /root/.ssh/id_rsa
      mode: "600"
    - content: "{{ lookup('file', ssh_public_key_file) }}"
      dest: /root/.ssh/id_rsa.pub
      mode: "644"

- name: Check if SMCIPMITool tar is downloaded
  stat:
    path: "{{ playbook_dir }}/smcipmitool.tar.gz"
  delegate_to: localhost
  register: stat_smcipmitool

# This is "proxied", assuming your local laptop can reach the smcipmitool URL
# and that the bastion machine may not (Ex you copy the smcipmitool tar file
# to a local lab machine)
- name: Get SMCIPMITool
  get_url:
    validate_certs: false
    force: true
    url: "{{ smcipmitool_url }}"
    dest: "{{ playbook_dir }}/smcipmitool.tar.gz"
  delegate_to: localhost
  when: not stat_smcipmitool.stat.exists

- name: Untar SMCIPMITool
  unarchive:
    src: "{{ playbook_dir }}/smcipmitool.tar.gz"
    dest: /usr/local/bin
    mode: 0700
    extra_opts:
    - --strip-components=1

- name: Get OpenShift clients, opm, kube-burner, grpcurl, and yq
  get_url:
    validate_certs: false
    force: true
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
  with_items:
  - url: "{{ openshift_client_url }}/latest/openshift-client-linux.tar.gz"
    dest: "{{ bastion_cluster_config_dir }}/openshift-client-linux.tar.gz"
  - url: "{{ openshift_client_url }}/latest/opm-linux.tar.gz"
    dest: "{{ bastion_cluster_config_dir }}/opm-linux.tar.gz"
  - url: "{{ kubeburner_url }}"
    dest: "{{ bastion_cluster_config_dir }}/kube-burner-linux.tar.gz"
  - url: "{{ grpcurl_url }}"
    dest: "{{ bastion_cluster_config_dir }}/grpcurl-linux.tar.gz"
  - url: "{{ yq_url }}"
    dest: "{{ bastion_cluster_config_dir }}/yq_linux_amd64.tar.gz"

# We rename oc/kubectl clients as oc.latest and kubectl.latest since they are
# likely not the actual version of the intended cluster, those specific clients
# are obtained during the bastion-ocp-version role in which we use oc.latest to
# extract the correct oc/kubectl clients for that version. Unfortunately we need
# an oc client in order to do that so we just use the latest public oc client
- name: Untar oc/kubectl clients
  unarchive:
    src: "{{ bastion_cluster_config_dir }}/openshift-client-linux.tar.gz"
    dest: "{{ bastion_cluster_config_dir }}"
    remote_src: yes
    mode: 0700

- name: Copy oc/kubectl clients into a pathed directory
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    remote_src: true
    mode: 0700
  loop:
  - src: "{{ bastion_cluster_config_dir }}/oc"
    dest: /usr/local/bin/oc.latest
  - src: "{{ bastion_cluster_config_dir }}/kubectl"
    dest: /usr/local/bin/kubectl.latest

- name: Untar opm, kube-burner and grpcurl client
  unarchive:
    src: "{{ item }}"
    dest: /usr/local/bin
    remote_src: yes
    mode: 0700
  loop:
  - "{{ bastion_cluster_config_dir }}/opm-linux.tar.gz"
  - "{{ bastion_cluster_config_dir }}/kube-burner-linux.tar.gz"
  - "{{ bastion_cluster_config_dir }}/grpcurl-linux.tar.gz"

- name: Untar yq tool
  unarchive:
    src: "{{ bastion_cluster_config_dir }}/yq_linux_amd64.tar.gz"
    dest: "{{ bastion_cluster_config_dir }}"
    remote_src: yes
    mode: 0700

- name: Copy yq tool into a pathed directory
  copy:
    src: "{{ bastion_cluster_config_dir }}/yq_linux_amd64"
    dest: /usr/local/bin/yq
    remote_src: true
    mode: 0700
