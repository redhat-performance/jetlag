---
# wait-hosts-discovered tasks

- name: RWN - Create list of nodes to be discovered
  set_fact:
    inventory_nodes: "{{ groups['controlplane'] }}"
  when: cluster_type == "rwn"

- name: BM - Create list of nodes to be discovered
  set_fact:
    inventory_nodes: "{{ groups['controlplane'] + groups['worker'] }}"
  when: cluster_type == "bm"

- name: SNO - Create list of nodes to be discovered
  set_fact:
    inventory_nodes: "{{ groups['sno'] }}"
  when: cluster_type == "sno"

- name: Assert that inventory_nodes is defined
  ansible.builtin.assert:
    that: inventory_nodes is defined
    quiet: true
    fail_msg: "Unsupported cluster type {{ cluster_type }}"

- name: Wait up to 40 min for nodes to be discovered
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v2/clusters/{{ ai_cluster_id }}"
    method: GET
    status_code: [200, 201]
    return_content: true
  register: cluster
  until: cluster.json.hosts | length == inventory_nodes | length
  retries: 40
  delay: 60

- name: Wait up to 5 minutes until hosts no longer in discovering status
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v2/infra-envs/{{ ai_infraenv_id }}/hosts/{{ item.id }}"
    method: GET
    status_code: [200, 201]
    return_content: true
  loop: "{{ cluster.json.hosts | list }}"
  register: host_data
  until: host_data.json.status != "discovering"
  retries: 30
  delay: 10

- name: Get cluster data for host and role setting
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v2/clusters/{{ ai_cluster_id }}"
    method: GET
    status_code: [200, 201]
    return_content: true
  register: cluster

- name: Set hostname and role for discovered hosts
  include_tasks: set_hostname_role.yml
  with_items:
  - "{{ cluster.json.hosts }}"
  loop_control:
    loop_var: discovered_host

- name: Patch cluster network settings
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v2/clusters/{{ ai_cluster_id }}"
    method: PATCH
    status_code: [201]
    return_content: true
    body_format: json
    body: {
        "cluster_networks":  [
          {
            "cidr": "{{ cluster_network_cidr }}",
            "cluster_id": "{{ ai_cluster_id }}",
            "host_prefix": "{{ cluster_network_host_prefix }}"
          }
        ],
        "service_networks":  [
          {
            "cidr": "{{ service_network_cidr }}",
            "cluster_id": "{{ ai_cluster_id }}",
          }
        ]
    }

- name: Patch cluster ingress/api vip addresses
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v2/clusters/{{ ai_cluster_id }}"
    method: PATCH
    status_code: [201]
    return_content: true
    body_format: json
    body: {
        "cluster_network_host_prefix": "{{ cluster_network_host_prefix }}",
        "vip_dhcp_allocation": "{{ vip_dhcp_allocation }}",
        "ingress_vips": [{"ip": "{{ controlplane_network_ingress }}"}],
        "api_vips": [{"ip": "{{ controlplane_network_api }}"}],
        "network_type": "{{ networktype }}"
    }

- name: Wait for cluster to be ready
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v2/clusters/{{ ai_cluster_id }}"
    method: GET
    status_code: [200, 201]
    return_content: true
  register: cluster
  until: "cluster.json.status == 'ready'"
  retries: 240
  delay: 5

- name: Set install disk for control-plane nodes
  include_tasks: set_node_install_disk.yml
  loop: "{{ cluster.json.hosts | selectattr('role', 'eq', 'master') | list }}"
  loop_control:
    loop_var: bm_node

- name: Set install disk for worker nodes
  include_tasks: set_node_install_disk.yml
  loop: "{{ cluster.json.hosts | selectattr('role', 'eq', 'worker') | list }}"
  loop_control:
    loop_var: bm_node

- name: Wait for cluster to be ready for install
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v2/clusters/{{ ai_cluster_id }}"
    method: GET
    status_code: [200, 201]
    return_content: true
  register: cluster
  until: "cluster.json.status == 'ready'"
  retries: 240
  delay: 5
