---
# mno-post-cluster-install tasks

- name: Create directories for mno cluster configuration items
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ bastion_cluster_config_dir }}"
    - "{{ bastion_cluster_config_dir }}/aap"
    - "{{ bastion_cluster_config_dir }}/gitops"
    - "{{ bastion_cluster_config_dir }}/localstorage"
    - "{{ bastion_cluster_config_dir }}/minio"
    - "{{ bastion_cluster_config_dir }}/openshift-monitoring"
    - "{{ bastion_cluster_config_dir }}/performance-addon-operator"

- name: Get credentials (kubeconfig and kubeadmin password) from installed cluster
  get_url:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v2/clusters/{{ ai_cluster_id }}/downloads/credentials?file_name={{ item.name }}"
    dest: "{{ bastion_cluster_config_dir }}/{{ item.dest }}"
  with_items:
    - name: kubeadmin-password
      dest: kubeadmin-password
    - name: kubeconfig
      dest: kubeconfig
    - name: kubeconfig
      dest: kubeconfig.backup

- name: Apply a label to the worker node(s)
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc label no --overwrite -l node-role.kubernetes.io/worker jetlag=true

- name: Install Performance-Addon-Operator - find channel
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc get packagemanifest performance-addon-operator -n openshift-marketplace -o jsonpath='{.status.defaultChannel}'
  register: channel
  when: install_performance_addon_operator

- name: Install Performance-Addon-Operator - Store channel in var
  set_fact:
    ocp_channel: "{{ channel.stdout }}"
  when: install_performance_addon_operator

- name: Place templated configuration items
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - src: ansible-automation-platform-operator.yml.j2
      dest: "{{ bastion_cluster_config_dir }}/aap/ansible-automation-platform-operator.yml"
    - src: openshift-gitops-operator.yml.j2
      dest: "{{ bastion_cluster_config_dir }}/gitops/openshift-gitops-operator.yml"
    - src: localstorage.yml.j2
      dest: "{{ bastion_cluster_config_dir }}/localstorage/localstorage.yml"
    - src: localvolume.yml.j2
      dest: "{{ bastion_cluster_config_dir }}/localstorage/localvolume.yml"
    - src: localvolume2.yml.j2
      dest: "{{ bastion_cluster_config_dir }}/localstorage/localvolume2.yml"
    - src: minio.yml.j2
      dest: "{{ bastion_cluster_config_dir }}/minio/minio.yml"
    - src: cluster-monitoring-config.yml.j2
      dest: "{{ bastion_cluster_config_dir }}/openshift-monitoring/cluster-monitoring-config.yml"
    - src: performance-addon-operator.yml.j2
      dest: "{{ bastion_cluster_config_dir }}/performance-addon-operator/performance-addon-operator.yml"

- name: Clone performance-dashboards
  git:
    repo: https://github.com/cloud-bulldozer/performance-dashboards.git
    dest: "{{ bastion_cluster_config_dir }}/performance-dashboards"
    force: true
    version: master
  when: setup_performance_dashboards | bool

- name: Deploy performance-dashboards
  shell: |
    export KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig
    {{ bastion_cluster_config_dir }}/performance-dashboards/dittybopper/deploy.sh
  args:
    chdir: "{{ bastion_cluster_config_dir }}/performance-dashboards/dittybopper/"
  when: setup_performance_dashboards | bool

- name: Add kube-burner sa
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc create sa kubeburner
  when: setup_kube_burner_sa | default(true) | bool

- name: Add cluster-admin role to kube-burner sa
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc adm policy add-cluster-role-to-user -z kubeburner cluster-admin
  when: setup_kube_burner_sa | default(true) | bool

- name: Disable default OperatorHub sources on bastion registry clusters
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc patch OperatorHub cluster --type json -p '[{"op": "add", "path": "/spec/disableAllDefaultSources", "value": true}]'
  when: use_bastion_registry | default(false)

- name: Apply olm-mirror imageContentSourcePolicy on bastion registry clusters
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/olm-mirror-{{ operator_index_name }}-{{ operator_index_tag }}/imageContentSourcePolicy.yaml
  when: use_bastion_registry | default(false)

- name: Apply olm-mirror catalogSource on bastion registry clusters
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/olm-mirror-{{ operator_index_name }}-{{ operator_index_tag }}/catalogSource.yaml
  when: use_bastion_registry | default(false)

- name: Install Ansible-Automation-Platform-operator
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/aap/ansible-automation-platform-operator.yml
  when: setup_ansible_automation_platform

- name: Install OpenShift-gitops-operator
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/gitops/openshift-gitops-operator.yml
  when: setup_openshift_gitops

- name: Setup control-plane nodes localstorage
  when: controlplane_localstorage_configuration
  block:
  - name: Label the control-plane nodes
    shell: |
      KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc label no --overwrite {{ item }} localstorage=true prometheus=true
    with_items: "{{ groups['controlplane'] }}"

  - name: Install local-storage operator
    shell:
      KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/localstorage/localstorage.yml

  # The localvolume resource will not be instantly available, thus retry for around 2 minutes
  - name: Create localvolume resource
    shell:
      KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/localstorage/localvolume.yml
    register: lv_result
    until: not lv_result.failed
    retries: 60
    delay: 2

  - name: Create localvolume2 resource
    shell:
      KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/localstorage/localvolume2.yml
    register: lv_result
    until: not lv_result.failed
    retries: 60
    delay: 2
    when: localvolume2_configuration

  - name: Configure OpenShift-Monitoring Prometheus to use localstorage
    shell:
      KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/openshift-monitoring/cluster-monitoring-config.yml

- name: Setup worker nodes localstorage
  when: worker_localstorage_configuration
  block:
  - name: Label the worker nodes
    shell: |
      KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc label no --overwrite {{ item }} localstorage=true prometheus=true
    with_items: "{{ groups['worker'] }}"

  - name: Install local-storage operator
    shell:
      KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/localstorage/localstorage.yml

  # The localvolume resource will not be instantly available, thus retry for around 15 minutes
  - name: Create localvolume resource
    shell:
      KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/localstorage/localvolume.yml
    register: lv_result
    until: not lv_result.failed
    retries: 450
    delay: 2

  - name: Create localvolume2 resource
    shell:
      KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/localstorage/localvolume2.yml
    register: lv_result
    until: not lv_result.failed
    retries: 60
    delay: 2
    when: localvolume2_configuration

- name: Setup Minio
  when: setup_minio | bool
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/minio/minio.yml

- name: Migrate ingresscontrollers (OpenShift Router) to master nodes
  when: migrate_ingresscontrollers | bool
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc patch ingresscontrollers/default --type merge -n openshift-ingress-operator -p '{"spec": {"nodePlacement": {"nodeSelector": {"matchLabels": {"node-role.kubernetes.io/master": "" }}, "tolerations": [{"effect": "NoSchedule", "key": "node-role.kubernetes.io/master"}]} }}'

- name: Apply OpenShift-Monitoring configuration options
  when: migrate_monitoring or worker_localstorage_configuration
  shell:
    KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc apply -f {{ bastion_cluster_config_dir }}/openshift-monitoring/cluster-monitoring-config.yml

- name: Install Performance-Addon-Operator - create PAO namespace, OperatorGroup and subscription
  shell: |
    KUBECONFIG={{ bastion_cluster_config_dir }}/kubeconfig oc create -f {{ bastion_cluster_config_dir }}/performance-addon-operator/performance-addon-operator.yml
  when: install_performance_addon_operator
