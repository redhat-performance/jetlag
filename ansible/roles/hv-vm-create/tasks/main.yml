---
# hv-vm-create tasks

- name: Check if vm disk file exists
  stat:
    path: "{{ hostvars[inventory_hostname]['disk_location'] }}/{{ inventory_hostname }}.qcow2"
  register: vm_disk_stat

- name: Create vm disk
  shell: |
    qemu-img create -f qcow2 {{ hostvars[inventory_hostname]['disk_location'] }}/{{ inventory_hostname }}.qcow2 {{ hostvars[inventory_hostname]['disk_size'] }}G
  when: not vm_disk_stat.stat.exists

- name: Create 2nd vm disk
  shell: |
    qemu-img create -f qcow2 {{ hostvars[inventory_hostname]['disk2_location'] }}/{{ inventory_hostname }}-sdb.qcow2 {{ hostvars[inventory_hostname]['disk2_size'] }}G
  when: "'disk2_location' in hostvars[inventory_hostname]"

- name: Set VM CPU count from host variables
  set_fact:
    hv_vm_cpu_count: "{{ hostvars[inventory_hostname]['cpus'] }}"

- name: Configure VM hugepages
  when: enable_vm_hugepages
  block:
    - name: Calculate hugepages needed for VM if not specified
      set_fact:
        calculated_vm_hugepage_count: "{{ (hostvars[inventory_hostname]['memory'] | int) // (vm_hugepage_size[:-1] | int) }}"
      when: vm_hugepage_count is not defined or vm_hugepage_count == ""

    - name: Set hugepage count for VM
      set_fact:
        vm_hugepages_needed: "{{ vm_hugepage_count if vm_hugepage_count is defined and vm_hugepage_count != '' else calculated_vm_hugepage_count }}"

    - name: Check host hugepages availability
      shell: |
        grep -E "HugePages_Free.*{{ vm_hugepage_size }}" /proc/meminfo | awk '{print $2}' || echo "0"
      register: host_hugepages_free
      delegate_to: "{{ hostvars[inventory_hostname]['ansible_host'] }}"

    - name: Validate sufficient hugepages available
      fail:
        msg: "Not enough {{ vm_hugepage_size }} hugepages available on host {{ hostvars[inventory_hostname]['ansible_host'] }}. Need: {{ vm_hugepages_needed }}, Available: {{ host_hugepages_free.stdout }}"
      when: (host_hugepages_free.stdout | int) < (vm_hugepages_needed | int)

    - name: Display hugepages configuration for VM
      debug:
        msg: "VM {{ inventory_hostname }} will use {{ vm_hugepages_needed }} {{ vm_hugepage_size }} hugepages ({{ (vm_hugepages_needed | int) * (vm_hugepage_size[:-1] | int) }}G total)"

- name: Set vNUMA configuration tasks
  when: vnuma_enabled
  block:
    - name: Gather host NUMA topology information
      shell: |
        lscpu | grep "NUMA node(s):" | awk '{print $3}'
      register: host_numa_nodes

    - name: Calculate vNUMA node count
      set_fact:
        vm_numa_nodes: "{{ host_numa_nodes.stdout | int if host_numa_nodes.stdout | int <= (hv_vm_cpu_count | int // 2) else (hv_vm_cpu_count | int // 2) }}"

    - name: Calculate vNUMA memory per node
      set_fact:
        vm_numa_memory_per_node: "{{ (hostvars[inventory_hostname]['memory'] | int // vm_numa_nodes | int) }}"

    - name: Calculate VM CPU sockets
      set_fact:
        vm_sockets: "{{ 1 if hv_vm_cpu_count | int < 8 else 2 if hv_vm_cpu_count | int <= 16 else 4 }}"

    - name: Calculate VM CPU cores and threads
      set_fact:
        vm_cores: "{{ (hv_vm_cpu_count | int // vm_sockets | int // 2) }}"
        vm_threads: 2

    - name: Calculate VM CPU topology
      set_fact:
        vm_sockets: "{{ 1 if hv_vm_cpu_count | int < 8 else 2 if hv_vm_cpu_count | int <= 16 else 4 }}"
        vm_cores: "{{ (hv_vm_cpu_count | int // vm_sockets | int // 2) }}"
        vm_threads: 2

    - name: Generate vNUMA CPU ranges
      set_fact:
        vm_numa_cpu_ranges: "{{ vm_numa_cpu_ranges | default([]) + [item ~ '-' ~ (item + (hv_vm_cpu_count | int // vm_numa_nodes | int) - 1)] }}"
      loop: "{{ range(0, hv_vm_cpu_count | int, hv_vm_cpu_count | int // vm_numa_nodes | int) | list }}"

- name: Template out kvm definition file
  template:
    src: kvm-def.xml.j2
    dest: "{{ hv_kvm_def_path }}/{{ inventory_hostname }}.xml"

- name: Create vm from xml
  shell: |
    virsh define {{ hv_kvm_def_path }}/{{ inventory_hostname }}.xml

- name: Set bmc url ipv4
  set_fact:
    bmc_url: "http://{{ hostvars[inventory_hostname]['hv_ip'] }}:{{ hv_bmc_port }}/redfish/v1/Systems/{{ hostvars[inventory_hostname]['domain_uuid'] }}"
  when: hostvars[inventory_hostname]['ip'] | ansible.utils.ipv4

- name: Set bmc url ipv6
  set_fact:
    bmc_url: "http://[{{ hostvars[inventory_hostname]['hv_ip'] }}]:{{ hv_bmc_port }}/redfish/v1/Systems/{{ hostvars[inventory_hostname]['domain_uuid'] }}"
  when: hostvars[inventory_hostname]['ip'] | ansible.utils.ipv6

- name: Verify virtual bmc is accessible
  uri:
    url: "{{ bmc_url }}"
    method: Get
    validate_certs: no
    return_content: yes
  register: webpage
  until: webpage.status == 200
  retries: 3
  delay: 2
