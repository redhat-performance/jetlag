# Jetlag provided DNS/DHCP on hypervisor
{% if use_disconnected_registry %}
# Do not use the servers in /etc/resolv.conf, this will flood the lab dns servers
no-resolv

# Block the ridiculous number of requests for the timeservers
address=/0.rhel.pool.ntp.org/
{% endif %}

# Bastion / assisted-installer / http-server / registry / router / dns
address=/{{ groups['bastion'][0] }}/{{ bastion_controlplane_ip }}

address=/api.{{ cluster_name }}.{{ base_dns_name }}/{{ controlplane_network_api }}
address=/apps.{{ cluster_name }}.{{ base_dns_name }}/{{ controlplane_network_ingress }}

# Jetlag provided DNS for VMs
{% for vm in groups['hv_vm'] %}
address=/{{ vm }}/{{ hostvars[vm].ip }}
address=/api.{{ vm }}.{{ base_dns_name }}/{{ hostvars[vm].ip }}
address=/apps.{{ vm }}.{{ base_dns_name }}/{{ hostvars[vm].ip }}
{% endfor %}

{% if groups['hv_vm'] | length > 0 %}
# Jumbo cluster DNS
address=/jumbocluster00/{{ hostvars[groups['hv_vm'][0]]['machine_network'] | ansible.utils.nthhost(-2) }}
address=/api.jumbocluster00.{{ base_dns_name }}/{{ hostvars[groups['hv_vm'][0]]['machine_network'] | ansible.utils.nthhost(-2) }}
address=/apps.jumbocluster00.{{ base_dns_name }}/{{ hostvars[groups['hv_vm'][0]]['machine_network'] | ansible.utils.nthhost(-3) }}
# Standard cluster DNS ({{ standard_cluster_dns_count }} Entries)
{% for cluster in range(1, standard_cluster_dns_count + 1, 1)  %}
address=/standard-{{ '%05d' | format(cluster) }}/{{ hostvars[groups['hv_vm'][0]]['machine_network'] | ansible.utils.nthhost(cluster * -2) }}
address=/api.standard-{{ '%05d' | format(cluster) }}.{{ base_dns_name }}/{{ hostvars[groups['hv_vm'][0]]['machine_network'] | ansible.utils.nthhost(cluster * -2) }}
address=/apps.standard-{{ '%05d' | format(cluster) }}.{{ base_dns_name }}/{{ hostvars[groups['hv_vm'][0]]['machine_network'] | ansible.utils.nthhost( (cluster * -2) - 1 ) }}
{% endfor %}
# Compact cluster DNS ({{ compact_cluster_dns_count }} Entries)
{% for cluster in range(1, compact_cluster_dns_count + 1, 1)  %}
address=/compact-{{ '%05d' | format(cluster) }}/{{ hostvars[groups['hv_vm'][0]]['machine_network'] | ansible.utils.nthhost((cluster + standard_cluster_dns_count) * -2) }}
address=/api.compact-{{ '%05d' | format(cluster) }}.{{ base_dns_name }}/{{ hostvars[groups['hv_vm'][0]]['machine_network'] | ansible.utils.nthhost((cluster + standard_cluster_dns_count) * -2) }}
address=/apps.compact-{{ '%05d' | format(cluster) }}.{{ base_dns_name }}/{{ hostvars[groups['hv_vm'][0]]['machine_network'] | ansible.utils.nthhost( ((cluster + standard_cluster_dns_count) * -2) - 1 ) }}
{% endfor %}
{% endif %}

{% for item in groups['sno'] %}
{% if hostvars[item].ip_address is defined %}
address=/apps.{{ hostvars[item].inventory_hostname }}.{{ base_dns_name }}/{{ hostvars[item].ip_address }}
{% endif %}
{% endfor %}

# Jetlag DHCP for VMs
{% if setup_hv_vm_dhcp %}
log-dhcp

interface={{ hypervisor_bridge_name }}

domain={{ base_dns_name }}

dhcp-range={{ controlplane_network | ansible.utils.ipaddr('network') }},static,48h
dhcp-option=option:router,{{ hostvars[groups['hv_vm'][0]]['gateway'] }}
dhcp-option=option:ntp-server,{{ hostvars[inventory_hostname].ip }}
dhcp-option=option:dns-server,{{ hostvars[inventory_hostname].ip }}
dhcp-option=option:netmask,{{ controlplane_network | ansible.utils.ipaddr('netmask') }}

{% for vm in groups['hv_vm'] %}
dhcp-host={{ hostvars[vm]['mac_address'] }},{{ hostvars[vm]['ip'] }},{{ vm }}
{% endfor %}
{% else %}
# No DHCP Setup
{% endif %}
