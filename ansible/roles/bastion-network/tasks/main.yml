---
# bastion-network tasks

- name: Determine machine type from bastion hostname
  set_fact:
    machine_type: "{{ (inventory_hostname.split('.')[0]).split('-')[-1] }}"

- name: Get list of all NetworkManager connections
  command: nmcli -g NAME connection show
  register: nmcli_connections
  changed_when: false

- name: Get NetworkManager connection names for all non-lab interfaces
  command: nmcli -g GENERAL.CONNECTION device show {{ item }}
  loop: "{{ hw_nic_name[lab][machine_type][1:] }}"
  register: non_lab_interfaces_nmcli
  changed_when: false
  failed_when: false

- name: Build list of connections to remove (jetlag-prefixed + connections on non-lab interfaces)
  set_fact:
    connections_to_remove: "{{ (nmcli_connections.stdout_lines | select('match', '^' ~ jetlag_conn_prefix) | list) + (non_lab_interfaces_nmcli.results | map(attribute='stdout') | reject('equalto', '') | list) | unique | list }}"

- name: Remove NetworkManager connections for clean reconfiguration
  nmcli:
    conn_name: "{{ item }}"
    state: absent
  loop: "{{ connections_to_remove }}"
  when: connections_to_remove | length > 0

- name: Stop and disable iptables
  systemd:
    state: stopped
    enabled: false
    name: iptables

- name: Set ipv4 sysctl
  sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    sysctl_set: true
    sysctl_file: /etc/sysctl.d/ipv4.forward.conf
    state: present
    reload: true

- name: Comment out scale lab injected ipv6 disabling
  replace:
    path: /etc/sysctl.conf
    regexp: "net.ipv6.conf.all.disable_ipv6 = 1"
    replace: "# net.ipv6.conf.all.disable_ipv6 = 1"
    backup: true

- name: Set ipv6 sysctl
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: true
    sysctl_file: /etc/sysctl.d/ipv6.conf
    state: present
    reload: true
  loop:
  - name: net.ipv6.conf.all.forwarding
    value: "1"
  - name: net.ipv6.conf.all.disable_ipv6
    value: "0"
  when:  bastion_controlplane_ip | ansible.utils.ipv6

- name: Increase the size of the arp-cache for dnsmasq
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: true
    sysctl_file: /etc/sysctl.d/arp.conf
    state: present
    reload: true
  loop:
  - name: net.ipv4.neigh.default.gc_thresh1
    value: "8192"
  - name: net.ipv4.neigh.default.gc_thresh2
    value: "32768"
  - name: net.ipv4.neigh.default.gc_thresh3
    value: "65536"
  - name: net.ipv6.neigh.default.gc_thresh1
    value: "8192"
  - name: net.ipv6.neigh.default.gc_thresh2
    value: "32768"
  - name: net.ipv6.neigh.default.gc_thresh3
    value: "65536"

- name: Allow natted traffic through bastion lab interface
  shell: |
    iptables -t nat -A POSTROUTING -o {{ bastion_lab_interface }} -j MASQUERADE

- name: Configure frr routing daemons
  lineinfile:
    path: /etc/frr/daemons
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
  - regexp: ^zebra=
    line: zebra=yes
  - regexp: ^bgpd=
    line: bgpd=yes
  - regexp: ^pbrd=
    line: pbrd=yes
  - regexp: ^staticd=
    line: staticd=yes

- name: Start and enable frr routing
  systemd:
    state: started
    enabled: true
    name: frr

# Bond configuration for scale/performance labs
- name: Setup bastion bond configuration
  when:
    - enable_bond | default(false)
  block:

  - name: Create bond0 connection for bastion
    nmcli:
      type: bond
      conn_name: "{{ jetlag_conn_prefix }}bond0"
      ifname: bond0
      ip4: "{{ bastion_controlplane_ip }}/{{ controlplane_network_prefix }}"
      mode: 802.3ad
      miimon: 100
      state: present
    when: bastion_controlplane_ip | ansible.utils.ipv4

  - name: Create bond0 connection for bastion (ipv6)
    nmcli:
      type: bond
      conn_name: "{{ jetlag_conn_prefix }}bond0"
      ifname: bond0
      ip6: "{{ bastion_controlplane_ip }}/{{ controlplane_network_prefix }}"
      mode: 802.3ad
      miimon: 100
      state: present
    when: bastion_controlplane_ip | ansible.utils.ipv6

  - name: Add first interface as bond slave
    nmcli:
      type: bond-slave
      conn_name: "{{ jetlag_conn_prefix }}bond0-slave-{{ bastion_bond0_interface1 }}"
      ifname: "{{ bastion_bond0_interface1 }}"
      master: bond0
      state: present

  - name: Add second interface as bond slave
    nmcli:
      type: bond-slave
      conn_name: "{{ jetlag_conn_prefix }}bond0-slave-{{ bastion_bond0_interface2 }}"
      ifname: "{{ bastion_bond0_interface2 }}"
      master: bond0
      state: present

# Single interface configuration for non-bonded setups
- name: Setup bastion single interface configuration
  when:
    - not enable_bond | default(false)
  block:
  - name: Setup bastion on control-plane network (ipv4)
    nmcli:
      type: ethernet
      conn_name: "{{ jetlag_conn_prefix }}{{ bastion_controlplane_interface }}"
      ifname: "{{ bastion_controlplane_interface }}"
      ip4: "{{ bastion_controlplane_ip }}/{{ controlplane_network_prefix }}"
      state: present
    when:  bastion_controlplane_ip | ansible.utils.ipv4

  - name: Setup bastion on control-plane network (ipv6)
    nmcli:
      type: ethernet
      conn_name: "{{ jetlag_conn_prefix }}{{ bastion_controlplane_interface }}"
      ifname: "{{ bastion_controlplane_interface }}"
      ip6: "{{ bastion_controlplane_ip }}/{{ controlplane_network_prefix }}"
      state: present
    when:  bastion_controlplane_ip | ansible.utils.ipv6
