---
# create-inventory tasks
#
# For Multi Node OpenShift clusters:
# * First machine is bastion
# * Following 3 machines are controlplane nodes (master)
# * Remaining are worker nodes (depending upon worker_node_count)
#
# For Single Node OpenShift clusters:
# * First machine is bastion
# * Second machine is SNO cluster
#

- name: Set ocp inventory download url from lab wiki - scalelab and performancelab
  set_fact:
    ocp_inventory_url: "http://{{ labs[lab]['quads'] }}/instack/{{ lab_cloud }}_ocpinventory.json"
  when:  ocp_inventory_override | string | length < 1 and (lab == 'scalelab' or lab == 'performancelab')

- name: Set ocp inventory download url to override
  set_fact:
    ocp_inventory_url: "{{ ocp_inventory_override }}"
  when:  ocp_inventory_override | string | length > 1

- name: Download ocpinventory.json
  uri:
    url: "{{ ocp_inventory_url }}"
    return_content: true
  register: ocpinventory
  when: ocp_inventory_url | regex_search('^http')

- name: Load {{ ocp_inventory_url }}
  set_fact:
    ocpinventory:
      json: "{{ lookup('file', ocp_inventory_url) }}"
  when: "'skipped' in ocpinventory"

- name: Set inventory variables
  set_fact:
    bastion_machine: "{{ ocpinventory.json.nodes[0].pm_addr | replace('mgmt-','') }}"
    bmc_user: "{{ ocpinventory.json.nodes[0].pm_user }}"
    bmc_password: "{{ ocpinventory.json.nodes[0].pm_password }}"
    ocpinventory_worker_nodes: []
    ocpinventory_sno_nodes: []
    ocpinventory_hv_nodes: []

- name: Get bastion foreman data (For lab ip address)
  uri:
    url: "https://{{ labs[lab]['foreman'] }}/api/hosts/{{ bastion_machine }}"
    force_basic_auth: yes
    user: "{{ lab_cloud }}"
    password: "{{ bmc_password }}"
    validate_certs: false
  register: bastion_foreman_data

- name: Determine machine type for automatic interface configuration
  set_fact:
    machine_type: "{{ (ocpinventory.json.nodes[0].pm_addr.split('.')[0]).split('-')[-1] }}"

- name: Set Controlplane network gateway
  set_fact:
    controlplane_network_gateway: "{{ controlplane_network | ansible.utils.nthhost(1) }}"
  when:
    - controlplane_network_gateway is not defined
    - not public_vlan

- name: Public VLAN autoconfiguration
  when: public_vlan
  block:
  - name: Public VLAN - Set controlplane_network_interface_idx to -1 for the last interface
    set_fact:
      controlplane_network_interface_idx: "-1"

  - name: Public VLAN - Update bastion_controlplane_interface to use last interface
    set_fact:
      bastion_controlplane_interface: "{{ hw_nic_name[lab][machine_type][-1] }}"
    when:
      - bastion_controlplane_interface is not defined
      - lab in hw_nic_name
      - machine_type in hw_nic_name[lab]

  - name: Public VLAN - Get assignment from quads
    uri:
      url: "https://{{ labs[lab]['quads'] }}/api/v3/assignments/active/{{ lab_cloud }}"
      force_basic_auth: yes
      user: "{{ lab_cloud }}"
      password: "{{ ocpinventory.json.nodes[0].pm_password }}"
      validate_certs: false
    register: quads_assignment

  - name: Public VLAN - Set addressing information
    set_fact:
      controlplane_network: "{{ quads_assignment.json.vlan.ip_range }}"
      controlplane_network_prefix: "{{ quads_assignment.json.vlan.ip_range | ipaddr('prefix') }}"

  - name: Public VLAN - Set Controlplane network gateway
    set_fact:
      controlplane_network_gateway: "{{ quads_assignment.json.vlan.gateway }}"
    when:
      - controlplane_network_gateway is not defined

  - name: Public VLAN - Set cluster_name if was set as default
    set_fact:
      cluster_name: "vlan{{ quads_assignment.json.vlan.vlan_id }}"
    when: cluster_name == "mno"

- name: Auto-configure bastion lab interface (only when not explicitly set)
  set_fact:
    bastion_lab_interface: "{{ hw_nic_name[lab][machine_type][0] }}"
  when:
    - bastion_lab_interface is not defined
    - lab in hw_nic_name
    - machine_type in hw_nic_name[lab]

- name: Auto-configure bastion controlplane interface (only when not explicitly set)
  set_fact:
    bastion_controlplane_interface: "{{ hw_nic_name[lab][machine_type][controlplane_network_interface_idx|int+1] }}"
  when:
    - bastion_controlplane_interface is not defined
    - lab in hw_nic_name
    - machine_type in hw_nic_name[lab]
    - not public_vlan

- name: Auto-configure controlplane lab interface (only when not explicitly set)
  set_fact:
    controlplane_lab_interface: "{{ hw_nic_name[lab][machine_type][0] }}"
  when:
    - controlplane_lab_interface is not defined
    - lab in hw_nic_name
    - machine_type in hw_nic_name[lab]

- name: Multi node cluster type tasks
  when: cluster_type == "mno"
  block:
  - name: MNO - Set inventory variables
    set_fact:
      controlplane0: "{{ ocpinventory.json.nodes[1].pm_addr }}"
      controlplane1: "{{ ocpinventory.json.nodes[2].pm_addr }}"
      controlplane2: "{{ ocpinventory.json.nodes[3].pm_addr }}"
      controlplane0_mac_address: "{{ ocpinventory.json.nodes[1].mac[controlplane_network_interface_idx | int] }}"
      controlplane1_mac_address: "{{ ocpinventory.json.nodes[2].mac[controlplane_network_interface_idx | int] }}"
      controlplane2_mac_address: "{{ ocpinventory.json.nodes[3].mac[controlplane_network_interface_idx | int] }}"
      controlplane0_vendor: "{{ hw_vendor[(ocpinventory.json.nodes[1].pm_addr.split('.')[0]).split('-')[-1]] }}"
      controlplane1_vendor: "{{ hw_vendor[(ocpinventory.json.nodes[2].pm_addr.split('.')[0]).split('-')[-1]] }}"
      controlplane2_vendor: "{{ hw_vendor[(ocpinventory.json.nodes[3].pm_addr.split('.')[0]).split('-')[-1]] }}"

  - name: MNO - Get controlplane0 lab mac address
    uri:
      url: "https://{{ labs[lab]['foreman'] }}/api/hosts/{{ controlplane0 | replace('mgmt-','') }}"
      force_basic_auth: yes
      user: "{{ lab_cloud }}"
      password: "{{ bmc_password }}"
      validate_certs: false
    register: controlplane0_foreman_data

  - name: MNO - Set controlplane0 lab mac addresses
    set_fact:
      controlplane0_lab_mac: "{{ item.mac }}"
    with_items: "{{ controlplane0_foreman_data.json.interfaces }}"
    when: item.primary|bool

  - name: MNO - Get controlplane1 lab mac address
    uri:
      url: "https://{{ labs[lab]['foreman'] }}/api/hosts/{{ controlplane1 | replace('mgmt-','') }}"
      force_basic_auth: yes
      user: "{{ lab_cloud }}"
      password: "{{ bmc_password }}"
      validate_certs: false
    register: controlplane1_foreman_data

  - name: MNO - Set controlplane1 lab mac addresses
    set_fact:
      controlplane1_lab_mac: "{{ item.mac }}"
    with_items: "{{ controlplane1_foreman_data.json.interfaces }}"
    when: item.primary|bool

  - name: MNO - Get controlplane2 lab mac address
    uri:
      url: "https://{{ labs[lab]['foreman'] }}/api/hosts/{{ controlplane2 | replace('mgmt-','') }}"
      force_basic_auth: yes
      user: "{{ lab_cloud }}"
      password: "{{ bmc_password }}"
      validate_certs: false
    register: controlplane2_foreman_data

  - name: MNO - Set controlplane2 lab mac addresses
    set_fact:
      controlplane2_lab_mac: "{{ item.mac }}"
    with_items: "{{ controlplane2_foreman_data.json.interfaces }}"
    when: item.primary|bool

  - name: MNO - Set max number of nodes
    set_fact:
      max_nodes: "{{ ocpinventory.json.nodes|length }}"
    when: worker_node_count == None

  - name: MNO - Set max number of nodes (worker_node_count set)
    set_fact:
      max_nodes: "{{ worker_node_count|int + 4 }}"
    when: worker_node_count != None

  - name: MNO - Set ocpinventory mno worker nodes
    set_fact:
      ocpinventory_worker_nodes: "{{ ocpinventory.json.nodes[4:max_nodes|int] }}"

  - name: MNO - Set ocpinventory hv nodes
    set_fact:
      ocpinventory_hv_nodes: "{{ ocpinventory.json.nodes[max_nodes|int:] }}"

- name: MNO - Get lab mac address
  uri:
    url: "https://{{ labs[lab]['foreman'] }}/api/hosts/{{ item.pm_addr | replace('mgmt-','') }}"
    force_basic_auth: yes
    user: "{{ lab_cloud }}"
    password: "{{ bmc_password }}"
    validate_certs: false
  with_items:
    - "{{ ocpinventory_worker_nodes }}"
  when: cluster_type == "mno"
  register: mno_foreman_data

- name: Single Node OpenShift cluster type tasks
  when: cluster_type == "sno"
  block:

  - name: SNO - Set ocpinventory sno nodes
    set_fact:
      ocpinventory_sno_nodes: "{{ ocpinventory.json.nodes[1:] }}"

  - name: SNO - Get lab data for each sno
    uri:
      url: "https://{{ labs[lab]['foreman'] }}/api/hosts/{{ item.pm_addr | replace('mgmt-','') }}"
      force_basic_auth: yes
      user: "{{ lab_cloud }}"
      password: "{{ bmc_password }}"
      validate_certs: false
    register: sno_foreman_data
    loop: "{{ ocpinventory_sno_nodes }}"

  - name: set json query fact
    set_fact:
      mac_query: "json.interfaces[?type=='interface'].mac"

  # Start at 2 because 1st is bastion, 2nd is SNO, rest are hypervisors
  # Commented out until implementation is a requirement
  # - name: SNO - Set ocpinventory hv nodes
  #   set_fact:
  #     ocpinventory_hv_nodes: "{{ ocpinventory.json.nodes[2:] }}"

- name: Loop over all OCP nodes to find Supermicro hardware
  include_tasks: find_supermicro.yml
  loop: "{{ ocpinventory.json.nodes }}"

- name: If no Supermicros found set fact
  set_fact:
    has_supermicro: false
  when: has_supermicro is not defined

- name: Virtual Multi node cluster type tasks
  when: cluster_type == "vmno"
  block:
  - name: VMNO - Set ocpinventory hv nodes
    set_fact:
      ocpinventory_hv_nodes: "{{ ocpinventory.json.nodes[1:] }}"

- name: Hypervisor tasks to determine if there is a 2nd disk available
  when: hv_inventory or cluster_type == "vmno"
  block:
  - name: Disable disk2 for all hypervisor machines
    set_fact:
      ocpinventory_hv_nodes: "{{ ocpinventory_hv_nodes[:idx] + [ocpinventory_hv_nodes[idx] | combine({'disk2_enable': false, 'disk2_device': ''})] + ocpinventory_hv_nodes[idx + 1:] }}"
    loop: "{{ ocpinventory_hv_nodes }}"
    loop_control:
      index_var: idx

  - name: Enable disk2_enable for r630 with sdb
    set_fact:
      ocpinventory_hv_nodes: "{{ ocpinventory_hv_nodes[:idx] + [ocpinventory_hv_nodes[idx] | combine({'disk2_enable': true, 'disk2_device': 'sdb'})] + ocpinventory_hv_nodes[idx + 1:] }}"
    when:
    - (item.pm_addr.split('.')[0]).split('-')[-1] in ['r630']
    loop: "{{ ocpinventory_hv_nodes }}"
    loop_control:
      index_var: idx

  - name: Check for disk2 on r640
    shell: |
       lsblk -l -o NAME | egrep "nvme0n1$|sdb$" | sort | head -n 1
    delegate_to: "{{ item.pm_addr | replace('mgmt-','') }}"
    vars:
      ansible_user: root
      ansible_ssh_pass: "{{ hv_ssh_pass }}"
    register: r640_disks
    when:
    - (item.pm_addr.split('.')[0]).split('-')[-1] in ['r640']
    loop: "{{ ocpinventory_hv_nodes }}"
    loop_control:
      index_var: idx

  - name: Enable disk2_enable for r640 with the captured extra disk
    set_fact:
      ocpinventory_hv_nodes: "{{ ocpinventory_hv_nodes[:idx] + [ocpinventory_hv_nodes[idx] | combine({'disk2_enable': true if (r640_disks.results)[idx].stdout else false, 'disk2_device': (r640_disks.results)[idx].stdout })] + ocpinventory_hv_nodes[idx + 1:] }}"
    when:
    - (item.pm_addr.split('.')[0]).split('-')[-1] in ['r640']
    loop: "{{ ocpinventory_hv_nodes }}"
    loop_control:
      index_var: idx

  - name: Enable disk2_enable for r660, r650, r750, r760, r730xd, and r930 with nvme0n1
    set_fact:
      ocpinventory_hv_nodes: "{{ ocpinventory_hv_nodes[:idx] + [ocpinventory_hv_nodes[idx] | combine({'disk2_enable': true, 'disk2_device': 'nvme0n1'})] + ocpinventory_hv_nodes[idx + 1:] }}"
    when:
    - (item.pm_addr.split('.')[0]).split('-')[-1] in ['r650', 'r660', 'r750', 'r760', 'r730xd', 'r740xd', 'r930']
    loop: "{{ ocpinventory_hv_nodes }}"
    loop_control:
      index_var: idx

  # Skip fc640 type since it has no extra disk
  # Skip 6018r type since it has only 2 80G disks

  - name: Append disk2_enable for 6048r, 1029u and 1029p with nvme0n1
    set_fact:
      ocpinventory_hv_nodes: "{{ ocpinventory_hv_nodes[:idx] + [ocpinventory_hv_nodes[idx] | combine({'disk2_enable': true, 'disk2_device': 'nvme0n1'})] + ocpinventory_hv_nodes[idx + 1:] }}"
    when:
    - (item.pm_addr.split('.')[0]).split('-')[-1] in ['6048r', '1029u', '1029p']
    loop: "{{ ocpinventory_hv_nodes }}"
    loop_control:
      index_var: idx

  - name: Append disk2_enable for 5039ms and dl360 with sdb
    set_fact:
      ocpinventory_hv_nodes: "{{ ocpinventory_hv_nodes[:idx] + [ocpinventory_hv_nodes[idx] | combine({'disk2_enable': true, 'disk2_device': 'sdb'})] + ocpinventory_hv_nodes[idx + 1:] }}"
    when:
    - (item.pm_addr.split('.')[0]).split('-')[-1] in ['5039ms', 'dl360']
    loop: "{{ ocpinventory_hv_nodes }}"
    loop_control:
      index_var: idx

  - name: Append disk2_enable for 6049p with nvme0n1
    set_fact:
      ocpinventory_hv_nodes: "{{ ocpinventory_hv_nodes[:idx] + [ocpinventory_hv_nodes[idx] | combine({'disk2_enable': true, 'disk2_device': 'nvme0n1'})] + ocpinventory_hv_nodes[idx + 1:] }}"
    when:
    - (item.pm_addr.split('.')[0]).split('-')[-1] in ['6049p']
    loop: "{{ ocpinventory_hv_nodes }}"
    loop_control:
      index_var: idx

- name: Validate network interface variables are properly configured
  block:
  - name: Validate bastion_lab_interface is defined
    assert:
      that:
        - bastion_lab_interface is defined
        - bastion_lab_interface != ""
      fail_msg: "bastion_lab_interface is not properly configured. Check your all.yml configuration or verify lab/machine_type support in lab.yml"
      success_msg: "bastion_lab_interface is configured: {{ bastion_lab_interface }}"

  - name: Validate bastion_controlplane_interface is defined
    assert:
      that:
        - bastion_controlplane_interface is defined
        - bastion_controlplane_interface != ""
      fail_msg: "bastion_controlplane_interface is not properly configured. Check your all.yml configuration or verify lab/machine_type support in lab.yml"
      success_msg: "bastion_controlplane_interface is configured: {{ bastion_controlplane_interface }}"

  - name: Validate controlplane_lab_interface is defined
    assert:
      that:
        - controlplane_lab_interface is defined
        - controlplane_lab_interface != ""
      fail_msg: "controlplane_lab_interface is not properly configured. Check your all.yml configuration or verify lab/machine_type support in lab.yml"
      success_msg: "controlplane_lab_interface is configured: {{ controlplane_lab_interface }}"

- name: Place inventory file named {{ lab_cloud }}.local into inventory directory
  template:
    src: "inventory-{{ cluster_type }}.j2"
    dest: "{{ playbook_dir }}/inventory/{{ lab_cloud }}.local"
    backup: true
