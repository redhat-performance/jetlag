---
# create-inventory tasks
#
# For Bare Metal clusters:
# * First machine is bastion
# * Following 3 machines are controlplane nodes (master)
# * Remaining are worker nodes (depending upon worker_node_count)
#
# For Remote Worker Node clusters:
# * First machine is bastion
# * Following 3 machines are controlplane nodes (master/worker)
# * Remaining are remote worker nodes (depending upon worker_node_count)
#
# For Single Node OpenShift clusters:
# * First machine is bastion
# * Remaining machines are SNO clusters (depending upon sno_node_count)
#

- name: Set ocp inventory download url from lab wiki
  set_fact:
    ocp_inventory_url: "http://{{ labs[lab]['quads'] }}/cloud/{{ lab_cloud }}_ocpinventory.json"
  when:  ocp_inventory_override | string | length < 1

- name: Set ocp inventory download url to override
  set_fact:
    ocp_inventory_url: "{{ ocp_inventory_override }}"
  when:  ocp_inventory_override | string | length > 1

- name: Download ocpinventory.json
  uri:
    url: "{{ ocp_inventory_url }}"
    return_content: true
  register: ocpinventory

- name: Set inventory variables
  set_fact:
    bastion_machine: "{{ ocpinventory.json.nodes[0].pm_addr | replace('mgmt-','') }}"
    bmc_user: "{{ ocpinventory.json.nodes[0].pm_user }}"
    bmc_password: "{{ ocpinventory.json.nodes[0].pm_password }}"
    ocpinventory_worker_nodes: []
    ocpinventory_rwn_nodes: []
    ocpinventory_sno_nodes: []
    ocpinventory_hv_nodes: []

- name: Bare metal cluster and remote worker node cluster type tasks
  when: cluster_type == "bm" or cluster_type == "rwn"
  block:
  - name: BM/RWN - Set inventory variables
    set_fact:
      controlplane0: "{{ ocpinventory.json.nodes[1].pm_addr }}"
      controlplane1: "{{ ocpinventory.json.nodes[2].pm_addr }}"
      controlplane2: "{{ ocpinventory.json.nodes[3].pm_addr }}"
      controlplane0_network_mac: "{{ ocpinventory.json.nodes[1].mac[controlplane_network_interface_idx] }}"
      controlplane1_network_mac: "{{ ocpinventory.json.nodes[2].mac[controlplane_network_interface_idx] }}"
      controlplane2_network_mac: "{{ ocpinventory.json.nodes[3].mac[controlplane_network_interface_idx] }}"
      controlplane0_vendor: "{{ hw_vendor[(ocpinventory.json.nodes[1].pm_addr.split('.')[0]).split('-')[-1]] }}"
      controlplane1_vendor: "{{ hw_vendor[(ocpinventory.json.nodes[2].pm_addr.split('.')[0]).split('-')[-1]] }}"
      controlplane2_vendor: "{{ hw_vendor[(ocpinventory.json.nodes[3].pm_addr.split('.')[0]).split('-')[-1]] }}"

  - name: BM/RWN - Get controlplane0 lab mac address
    uri:
      url: "https://{{ labs[lab]['foreman'] }}/api/hosts/{{ controlplane0 | replace('mgmt-','') }}"
      force_basic_auth: yes
      user: "{{ lab_cloud }}"
      password: "{{ bmc_password }}"
      validate_certs: false
    register: controlplane0_foreman_data

  - name: BM/RWN - Set controlplane0 lab mac addresses
    set_fact:
      controlplane0_lab_mac: "{{ item.mac }}"
    with_items: "{{ controlplane0_foreman_data.json.interfaces }}"
    when: item.primary|bool

  - name: BM/RWN - Get controlplane1 lab mac address
    uri:
      url: "https://{{ labs[lab]['foreman'] }}/api/hosts/{{ controlplane1 | replace('mgmt-','') }}"
      force_basic_auth: yes
      user: "{{ lab_cloud }}"
      password: "{{ bmc_password }}"
      validate_certs: false
    register: controlplane1_foreman_data

  - name: BM/RWN - Set controlplane1 lab mac addresses
    set_fact:
      controlplane1_lab_mac: "{{ item.mac }}"
    with_items: "{{ controlplane1_foreman_data.json.interfaces }}"
    when: item.primary|bool

  - name: BM/RWN - Get controlplane2 lab mac address
    uri:
      url: "https://{{ labs[lab]['foreman'] }}/api/hosts/{{ controlplane2 | replace('mgmt-','') }}"
      force_basic_auth: yes
      user: "{{ lab_cloud }}"
      password: "{{ bmc_password }}"
      validate_certs: false
    register: controlplane2_foreman_data

  - name: BM/RWN - Set controlplane2 lab mac addresses
    set_fact:
      controlplane2_lab_mac: "{{ item.mac }}"
    with_items: "{{ controlplane2_foreman_data.json.interfaces }}"
    when: item.primary|bool

  - name: BM/RWN - Set max number of nodes
    set_fact:
      max_nodes: "{{ ocpinventory.json.nodes|length }}"
    when: worker_node_count == None

  - name: BM/RWN - Set max number of nodes (worker_node_count set)
    set_fact:
      max_nodes: "{{ worker_node_count|int + 4 }}"
    when: worker_node_count != None

  - name: BM - Set ocpinventory bm nodes
    set_fact:
      ocpinventory_worker_nodes: "{{ ocpinventory.json.nodes[4:max_nodes|int] }}"

  - name: RWN - Set ocpinventory rwn nodes
    set_fact:
      ocpinventory_rwn_nodes: "{{ ocpinventory.json.nodes[4:max_nodes|int] }}"

  - name: BM/RWN - Set ocpinventory hv nodes
    set_fact:
      ocpinventory_hv_nodes: "{{ ocpinventory.json.nodes[max_nodes|int:] }}"

- name: BM - Get lab mac address
  uri:
    url: "https://{{ labs[lab]['foreman'] }}/api/hosts/{{ item.pm_addr | replace('mgmt-','') }}"
    force_basic_auth: yes
    user: "{{ lab_cloud }}"
    password: "{{ bmc_password }}"
    validate_certs: false
  with_items:
    - "{{ ocpinventory_worker_nodes }}"
  when: cluster_type == "bm"
  register: bm_foreman_data

- name: Single Node OpenShift cluster type tasks
  when: cluster_type == "sno"
  block:

  - name: SNO - Set max number of nodes
    set_fact:
      max_nodes: "{{ ocpinventory.json.nodes|length }}"
    when: sno_node_count == None

  - name: SNO - Set max number of SNO nodes (sno_node_count is set)
    set_fact:
      max_nodes: "{{ sno_node_count|int + 1 }}"
    when: sno_node_count != None

  - name: SNO - Set ocpinventory sno nodes
    set_fact:
      ocpinventory_sno_nodes: "{{ ocpinventory.json.nodes[1:max_nodes|int] }}"

  - name: SNO - Get lab data for each sno
    uri:
      url: "https://{{ labs[lab]['foreman'] }}/api/hosts/{{ item.pm_addr | replace('mgmt-','') }}"
      force_basic_auth: yes
      user: "{{ lab_cloud }}"
      password: "{{ bmc_password }}"
      validate_certs: false
    register: sno_foreman_data
    loop: "{{ ocpinventory_sno_nodes }}"

  - name: set json query fact
    set_fact:
      mac_query: "json.interfaces[?type=='interface'].mac"

- name: Place inventory file named {{ lab_cloud }}.local into inventory directory
  template:
    src: "inventory-{{ cluster_type }}.j2"
    dest: "{{ playbook_dir }}/inventory/{{ lab_cloud }}.local"
    backup: true
