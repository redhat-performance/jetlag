[all:vars]
allocation_node_count={{ ocpinventory.json.nodes | length }}
supermicro_nodes={{ has_supermicro | bool }}

[bastion]
{{ bastion_machine }} ansible_ssh_user=root bmc_address=mgmt-{{ bastion_machine }}

[bastion:vars]
bmc_user={{ bmc_user }}
bmc_password={{ bmc_password }}

[controlplane]
{{ controlplane0.split('.')[0] | replace('mgmt-','') }} bmc_address={{ controlplane0 }} network_mac={{ controlplane0_network_mac }} lab_mac={{ controlplane0_lab_mac }} ip={{ controlplane_network | ansible.netcommon.nthhost(5) }} vendor={{ controlplane0_vendor }}
{{ controlplane1.split('.')[0] | replace('mgmt-','') }} bmc_address={{ controlplane1 }} network_mac={{ controlplane1_network_mac }} lab_mac={{ controlplane1_lab_mac }} ip={{ controlplane_network | ansible.netcommon.nthhost(6) }} vendor={{ controlplane1_vendor }}
{{ controlplane2.split('.')[0] | replace('mgmt-','') }} bmc_address={{ controlplane2 }} network_mac={{ controlplane2_network_mac }} lab_mac={{ controlplane2_lab_mac }} ip={{ controlplane_network | ansible.netcommon.nthhost(7) }} vendor={{ controlplane2_vendor }}

[controlplane:vars]
role=master
boot_iso=discovery.iso
bmc_user={{ bmc_user }}
bmc_password={{ bmc_password }}
lab_interface={{ controlplane_lab_interface }}
network_interface={{ controlplane_network_interface }}
network_prefix={{ controlplane_network_prefix }}
gateway={{ controlplane_network_gateway }}
{% if controlplane_bastion_as_dns %}
dns1={{ bastion_controlplane_ip }}
{% else %}
dns1={{ labs[lab]['dns'][0] }}
dns2={{ labs[lab]['dns'][1] | default('') }}
{% endif %}

[worker]
{% for worker in ocpinventory_worker_nodes %}
{{ worker.pm_addr.split('.')[0] | replace('mgmt-','') }} bmc_address={{ worker.pm_addr }} network_mac={{ worker.mac[controlplane_network_interface_idx] }} lab_mac={{ ( (bm_foreman_data.results| selectattr('json.name', 'eq', worker.pm_addr | replace('mgmt-',''))|first).json.interfaces | selectattr('primary', 'eq', True)|first).mac }} ip={{ controlplane_network | ansible.netcommon.nthhost(loop.index + bm_worker_node_offset) }} vendor={{ hw_vendor[(worker.pm_addr.split('.')[0]).split('-')[-1]] }}
{% endfor %}

[worker:vars]
role=worker
boot_iso=discovery.iso
bmc_user={{ bmc_user }}
bmc_password={{ bmc_password }}
lab_interface={{ controlplane_lab_interface }}
network_interface={{ controlplane_network_interface }}
network_prefix={{ controlplane_network_prefix }}
gateway={{ controlplane_network_gateway }}
{% if controlplane_bastion_as_dns %}
dns1={{ bastion_controlplane_ip }}
{% else %}
dns1={{ labs[lab]['dns'][0] }}
dns2={{ labs[lab]['dns'][1] | default('') }}
{% endif %}

[remoteworker]
# Unused

[remoteworker:vars]
# Unused

[sno]
# Unused

[sno:vars]
# Unused

{% if hv_inventory %}
[hv]
{% for hv in ocpinventory_hv_nodes %}
{{ hv.pm_addr | replace('mgmt-','') }} bmc_address={{ hv.pm_addr }} vendor={{ hw_vendor[(hv.pm_addr.split('.')[0]).split('-')[-1]] }} ip={{ controlplane_network | ansible.netcommon.nthhost(loop.index + ocpinventory_worker_nodes|length + bm_worker_node_offset + hv_ip_offset) }} nic={{ hw_nic_name[lab][(hv.pm_addr.split('.')[0]).split('-')[-1]][hypervisor_nic_interface_idx] if lab == 'scalelab' }} disk2_enable={{ hv.disk2_enable }} disk2_device={{ hv.disk2_device }}
{% endfor %}

[hv:vars]
ansible_user=root
ansible_ssh_pass={{ hv_ssh_pass }}
bmc_user={{ bmc_user }}
bmc_password={{ bmc_password }}
network_prefix={{ controlplane_network_prefix }}

[hv_sno]
{% set ctr = namespace(sno=1) %}
{% for hv in ocpinventory_hv_nodes %}
{% set hv_loop = loop %}
{% for sno in range(hw_vm_sno_counts[lab][(hv.pm_addr.split('.')[0]).split('-')[-1]]['default']) %}
sno{{ '%05d' % ctr.sno }} ansible_host={{ hv.pm_addr | replace('mgmt-','') }} hv_ip={{ controlplane_network | ansible.netcommon.nthhost(hv_loop.index + ocpinventory_worker_nodes|length + bm_worker_node_offset + hv_ip_offset) }} ip={{ controlplane_network | ansible.netcommon.nthhost(bastion_dnsmasq_cd_network_offset + ctr.sno - 1) }} cpus={{ hv_sno_cpu_count }} memory={{ hv_sno_memory_size }} disk_size={{ hv_sno_disk_size }} vnc_port={{ 5900 + loop.index }} mac_address={{ (90520730730496 + ctr.sno) | ansible.netcommon.hwaddr('linux') }} domain_uuid={{ ctr.sno | to_uuid }} disk_location=/var/lib/libvirt/images{% if hv_sno_bandwidth_limit %} bw_avg={{ hv_sno_bandwidth_average }} bw_peak={{ hv_sno_bandwidth_peak }} bw_burst={{ hv_sno_bandwidth_burst }}{% endif %}

{% set ctr.sno = ctr.sno + 1 %}
{% endfor %}
{% if hv.disk2_enable %}
{% for sno in range(hw_vm_sno_counts[lab][(hv.pm_addr.split('.')[0]).split('-')[-1]][hv.disk2_device]) %}
sno{{ '%05d' % ctr.sno }} ansible_host={{ hv.pm_addr | replace('mgmt-','') }} hv_ip={{ controlplane_network | ansible.netcommon.nthhost(hv_loop.index + ocpinventory_worker_nodes|length + bm_worker_node_offset + hv_ip_offset) }} ip={{ controlplane_network | ansible.netcommon.nthhost(bastion_dnsmasq_cd_network_offset + ctr.sno - 1) }} cpus={{ hv_sno_cpu_count }} memory={{ hv_sno_memory_size }} disk_size={{ hv_sno_disk_size }} vnc_port={{ 5900 + loop.index + hw_vm_sno_counts[lab][(hv.pm_addr.split('.')[0]).split('-')[-1]]['default'] }} mac_address={{ (90520730730496 + ctr.sno) | ansible.netcommon.hwaddr('linux') }} domain_uuid={{ ctr.sno | to_uuid }} disk_location={{ disk2_mount_path }}/libvirt/images{% if hv_sno_bandwidth_limit %} bw_avg={{ hv_sno_bandwidth_average }} bw_peak={{ hv_sno_bandwidth_peak }} bw_burst={{ hv_sno_bandwidth_burst }}{% endif %}

{% set ctr.sno = ctr.sno + 1 %}
{% endfor %}
{% endif %}

{% endfor %}

[hv_sno:vars]
ansible_user=root
ansible_ssh_pass={{ hv_ssh_pass }}
base_domain={{ base_dns_name }}
machine_network={{ controlplane_network }}
network_prefix={{ controlplane_network_prefix }}
gateway={{ controlplane_network_gateway }}
{% if hv_sno_bandwidth_limit %}
bw_limit={{ hv_sno_bandwidth_limit }}
{% endif %}
{% endif %}
