[all:vars]
allocation_node_count={{ ocpinventory.json.nodes | length }}
supermicro_nodes={{ has_supermicro | bool }}
{% if public_vlan %}
cluster_name={{ cluster_name }}
controlplane_network={{ controlplane_network }}
{% if lab == "scalelab" %}
base_dns_name=rdu2.scalelab.redhat.com
{% elif lab == "performancelab" %}
base_dns_name=rdu3.labs.perfscale.redhat.com
{% else %}
base_dns_name={{ base_dns_name }}
{% endif %}
{% endif %}

[bastion]
{{ bastion_machine }} ansible_ssh_user=root bmc_address=mgmt-{{ bastion_machine }}

[bastion:vars]
bmc_user={{ bmc_user }}
bmc_password={{ bmc_password }}

[controlplane]
# Unused

[controlplane:vars]
# Unused

[worker]
# Unused

[worker:vars]
# Unused

[sno]
# Single Node OpenShift Clusters
#  Report all machines in the cluster aside from the bastion. Only one should
#  be uncommented at a time, but you can build SNO clusters one at a time by
#  rerunning the SNO deploy playbook after changing which inventory line is
#  uncommented.
{% for sno in ocpinventory_sno_nodes %}
{%- if use_bastion_registry -%}
{%-   set ip=controlplane_network | ansible.utils.nthhost(loop.index0 + 5) -%}
{%- elif public_vlan | bool -%}
{%-   set ip=controlplane_network | ansible.utils.nthhost(loop.index0 + 1) -%}
{%- else -%}
{%- set ip=(sno_foreman_data.results|selectattr('json.name', 'eq', sno.pm_addr | replace('mgmt-',''))|first).json.ip -%}
{%- endif -%}
{% if not loop.first %}# {% endif %}{{ sno.pm_addr.split('.')[0] | replace('mgmt-','') }} bmc_address={{ sno.pm_addr }} boot_iso={{ sno.pm_addr.split('.')[0] | replace('mgmt-','') }}.iso ip={{ ip }} vendor={{ hw_vendor[(sno.pm_addr.split('.')[0]).split('-')[-1]] }} lab_mac={{ (sno_foreman_data.results|selectattr('json.name', 'eq', sno.pm_addr | replace('mgmt-',''))|first) | json_query(mac_query) | join(', ') }} mac_address={{ sno.mac[controlplane_network_interface_idx|int] }} install_disk={{ sno_install_disk }}
{% endfor %}

[sno:vars]
bmc_user={{ bmc_user }}
bmc_password={{ bmc_password }}
{% if public_vlan or use_bastion_registry %}
lab_interface={{ controlplane_lab_interface }}
network_interface={{ controlplane_network_interface }}
gateway={{ controlplane_network_gateway }}
{% endif %}
{% if public_vlan %}
network_prefix={{ controlplane_network_prefix }}
{% elif use_bastion_registry %}
network_prefix={{ controlplane_network | ipaddr('prefix') }}
{% endif %}
{% if controlplane_bastion_as_dns %}
dns1={{ bastion_controlplane_ip }}
{% else %}
dns1={{ labs[lab]['dns'][0] }}
dns2={{ labs[lab]['dns'][1] | default('') }}
{% endif %}

[hv]
# Unused

[hv:vars]
# Unused

[hv_vm]
# Unused

[hv_vm:vars]
# Unused
