[all:vars]
allocation_node_count={{ ocpinventory.json.nodes | length }}
supermicro_nodes={{ has_supermicro | bool }}
{% if sno_use_lab_dhcp %}
# Commented out because sno_use_lab_dhcp is set to true
# controlplane_network={{ controlplane_network }}
# controlplane_network_prefix={{ controlplane_network_prefix }}
{% else %}
controlplane_network={{ controlplane_network }}
controlplane_network_prefix={{ controlplane_network_prefix }}
{% endif %}
{% if public_vlan and (lab == "scalelab" or lab == "performancelab") %}
base_dns_name={{ labs[lab]['base_dns_name'] }}
{% else %}
base_dns_name={{ base_dns_name }}
{% endif %}
# Network interface configuration
bastion_lab_interface={{ bastion_lab_interface }}
bastion_controlplane_interface={{ bastion_controlplane_interface }}
controlplane_lab_interface={{ controlplane_lab_interface }}
{% if enable_bond | default(false) %}
bastion_bond0_interface1={{ bastion_bond0_interface1 }}
bastion_bond0_interface2={{ bastion_bond0_interface2 }}
{% endif %}

[bastion]
{{ bastion_machine }} ansible_ssh_user=root bmc_address=mgmt-{{ bastion_machine }} lab_ip={{ bastion_foreman_data.json.ip }}

[bastion:vars]
bmc_user={{ bmc_user }}
bmc_password={{ bmc_password }}

[controlplane]
# Unused

[controlplane:vars]
# Unused

{% if ocpinventory_worker_nodes is defined and ocpinventory_worker_nodes|length > 0 %}
[worker]
{% for worker in ocpinventory_worker_nodes %}
{%   set worker_long_hostname=worker.pm_addr | replace('mgmt-','') %}
{%   set worker_short_hostname=(worker_long_hostname.split('.')[0]) %}
{%   set lab_mac=(sno_foreman_data.results|selectattr('json.name', 'eq', worker_long_hostname)|first) | json_query(mac_query) | join(', ') %}
{%   if sno_use_lab_dhcp %}
{%     set ip=(sno_foreman_data.results|selectattr('json.name', 'eq', worker_long_hostname)|first).json.ip %}
{%   else %}
{%     set ip=controlplane_network | ansible.utils.nthhost(loop.index0 + sno_controlplane_ip_offset) %}
{%   endif %}
{%   set worker_hw = (worker.pm_addr.split('.')[0]).split('-')[-1] %}
{%   set worker_parts = (worker.pm_addr.split('.')[0]).replace('mgmt-','').split('-') %}
{%   set worker_rack = worker_parts[0] %}
{%   set worker_unit = worker_parts[1] if worker_parts|length > 1 else '' %}
{%   set worker_disk = worker_install_disk | default(hw_install_disk[lab][worker_rack ~ '-' ~ worker_unit ~ '-' ~ worker_hw]) | default(hw_install_disk[lab][worker_rack ~ '-' ~ worker_hw]) | default(hw_install_disk[lab][worker_hw]) | default('/dev/sda') %}
{% if sno_worker_foreman_data is defined and sno_worker_foreman_data.results is defined %}
{{ worker_short_hostname }} bmc_address={{ worker.pm_addr }} mac_address={{ worker.mac[controlplane_network_interface_idx|int] }} lab_mac={{ lab_mac }} ip={{ ip }} vendor={{ hw_vendor[(worker.pm_addr.split('.')[0]).split('-')[-1]] }} install_disk={{ worker_disk }}
{% endif %}
{% endfor %}

[worker:vars]
role=worker
bmc_user={{ bmc_user }}
bmc_password={{ bmc_password }}
lab_interface={{ controlplane_lab_interface }}
{% if sno_use_lab_dhcp %}
# Commented out because sno_use_lab_dhcp is set to true
# network_interface={{ controlplane_network_interface }}
# network_prefix={{ controlplane_network_prefix }}
# gateway={{ controlplane_network_gateway }}
{% if controlplane_bastion_as_dns %}
# dns1={{ bastion_controlplane_ip }}
{% else %}
# dns1={{ labs[lab]['dns'][0] }}
# dns2={{ labs[lab]['dns'][1] | default('') }}
{% endif %}
{% else %}
network_interface={{ controlplane_network_interface }}
network_prefix={{ controlplane_network_prefix }}
gateway={{ controlplane_network_gateway }}
{% if controlplane_bastion_as_dns %}
dns1={{ bastion_controlplane_ip }}
{% else %}
dns1={{ labs[lab]['dns'][0] }}
dns2={{ labs[lab]['dns'][1] | default('') }}
{% endif %}
{% endif %}
{% else %}
[worker]
# No worker nodes configured

[worker:vars]
# No worker nodes configured
{% endif %}

[sno]
# Only one can be uncommented and deployed at a time, but you can deploy additional SNOs
# one at a time by rerunning the SNO deploy playbook after changing which inventory line
# is uncommented
{% for sno in ocpinventory_sno_nodes %}
{%   set sno_long_hostname=sno.pm_addr | replace('mgmt-','') %}
{%   if public_vlan and loop.first %}
{%     set sno_short_hostname=cluster_name %}
{%   else %}
{%     set sno_short_hostname=(sno_long_hostname.split('.')[0]) %}
{%   endif %}
{%   set lab_mac=(sno_foreman_data.results|selectattr('json.name', 'eq', sno_long_hostname)|first) | json_query(mac_query) | join(', ') %}
{%   if sno_use_lab_dhcp %}
{%     set ip=(sno_foreman_data.results|selectattr('json.name', 'eq', sno_long_hostname)|first).json.ip %}
{%   else %}
{%     set ip=controlplane_network | ansible.utils.nthhost(loop.index0 + sno_controlplane_ip_offset) %}
{%   endif %}
{%   set sno_hw = (sno.pm_addr.split('.')[0]).split('-')[-1] %}
{%   set sno_parts = (sno.pm_addr.split('.')[0]).replace('mgmt-','').split('-') %}
{%   set sno_rack = sno_parts[0] %}
{%   set sno_unit = sno_parts[1] if sno_parts|length > 1 else '' %}
{%   set sno_disk = sno_install_disk | default(hw_install_disk[lab][sno_rack ~ '-' ~ sno_unit ~ '-' ~ sno_hw]) | default(hw_install_disk[lab][sno_rack ~ '-' ~ sno_hw]) | default(hw_install_disk[lab][sno_hw]) | default('/dev/sda') %}
{%   if enable_bond | default(false) %}
{%     if not loop.first %}# {% endif %}{{ sno_short_hostname }} bmc_address={{ sno.pm_addr }} bond0_macs={{ sno.bond0_macs }} lab_mac={{ lab_mac }} ip={{ ip }} vendor={{ hw_vendor[sno_hw] }} install_disk={{ sno_disk }} boot_iso={{ sno_short_hostname }}.iso
{%   else %}
{%     if not loop.first %}# {% endif %}{{ sno_short_hostname }} bmc_address={{ sno.pm_addr }} mac_address={{ sno.mac[controlplane_network_interface_idx|int] }} lab_mac={{ lab_mac }} ip={{ ip }} vendor={{ hw_vendor[sno_hw] }} install_disk={{ sno_disk }} boot_iso={{ sno_short_hostname }}.iso
{%   endif %}
{% endfor %}

[sno:vars]
role=master
bmc_user={{ bmc_user }}
bmc_password={{ bmc_password }}
{% if sno_use_lab_dhcp %}
# Commented out because sno_use_lab_dhcp is set to true
# lab_interface={{ controlplane_lab_interface }}
# network_interface={{ controlplane_network_interface }}
# network_prefix={{ controlplane_network_prefix }}
# gateway={{ controlplane_network_gateway }}
{%   if controlplane_bastion_as_dns %}
# dns1={{ bastion_controlplane_ip }}
{%   else %}
# dns1={{ labs[lab]['dns'][0] }}
# dns2={{ labs[lab]['dns'][1] | default('') }}
{%   endif %}
{% else %}
lab_interface={{ controlplane_lab_interface }}
{% if enable_bond | default(false) and not (public_vlan | default(false)) %}
bond0_interfaces={{ private_bond_interfaces }}
{% else %}
network_interface={{ controlplane_network_interface }}
{% endif %}
network_prefix={{ controlplane_network_prefix }}
gateway={{ controlplane_network_gateway }}
{%   if controlplane_bastion_as_dns %}
dns1={{ bastion_controlplane_ip }}
{%   else %}
dns1={{ labs[lab]['dns'][0] }}
dns2={{ labs[lab]['dns'][1] | default('') }}
{%   endif %}
{% endif %}

[hv]
# Unused

[hv:vars]
# Unused

[hv_vm]
# Unused

[hv_vm:vars]
# Unused
