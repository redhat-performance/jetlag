[all:vars]
allocation_node_count={{ ocpinventory.json.nodes | length }}
supermicro_nodes={{ has_supermicro | bool }}
{% if sno_use_lab_dhcp %}
# Commented out because sno_use_lab_dhcp is set to true
# controlplane_network={{ controlplane_network }}
# controlplane_network_prefix={{ controlplane_network_prefix }}
{% else %}
controlplane_network={{ controlplane_network }}
controlplane_network_prefix={{ controlplane_network_prefix }}
{% endif %}
{% if (sno_use_lab_dhcp or public_vlan) and (lab == "scalelab") %}
base_dns_name=rdu2.scalelab.redhat.com
{% elif (sno_use_lab_dhcp or public_vlan) and (lab == "performancelab") %}
base_dns_name=rdu3.labs.perfscale.redhat.com
{% else %}
base_dns_name={{ base_dns_name }}
{% endif %}

[bastion]
{{ bastion_machine }} ansible_ssh_user=root bmc_address=mgmt-{{ bastion_machine }}

[bastion:vars]
bmc_user={{ bmc_user }}
bmc_password={{ bmc_password }}

[controlplane]
# Unused

[controlplane:vars]
# Unused

[worker]
# Unused

[worker:vars]
# Unused

[sno]
# Only one can be uncommented and deployed at a time, but you can deploy additional SNOs
# one at a time by rerunning the SNO deploy playbook after changing which inventory line
# is uncommented
{% for sno in ocpinventory_sno_nodes %}
{%   set sno_long_hostname=sno.pm_addr | replace('mgmt-','') %}
{%   if public_vlan and loop.first %}
{%     set sno_short_hostname=cluster_name %}
{%   else %}
{%     set sno_short_hostname=(sno_long_hostname.split('.')[0]) %}
{%   endif %}
{%   set lab_mac=(sno_foreman_data.results|selectattr('json.name', 'eq', sno_long_hostname)|first) | json_query(mac_query) | join(', ') %}
{%   if sno_use_lab_dhcp %}
{%     set ip=(sno_foreman_data.results|selectattr('json.name', 'eq', sno_long_hostname)|first).json.ip %}
{%   else %}
{%     set ip=controlplane_network | ansible.utils.nthhost(loop.index0 + 3) %}
{%   endif %}
{%   if not loop.first %}# {% endif %}{{ sno_short_hostname }} bmc_address={{ sno.pm_addr }} mac_address={{ sno.mac[controlplane_network_interface_idx|int] }} lab_mac={{ lab_mac }} ip={{ ip }} vendor={{ hw_vendor[(sno.pm_addr.split('.')[0]).split('-')[-1]] }} install_disk={{ sno_install_disk }} boot_iso={{ sno_short_hostname }}.iso
{% endfor %}

[sno:vars]
role=master
bmc_user={{ bmc_user }}
bmc_password={{ bmc_password }}
{% if sno_use_lab_dhcp %}
# Commented out because sno_use_lab_dhcp is set to true
# lab_interface={{ controlplane_lab_interface }}
# network_interface={{ controlplane_network_interface }}
# network_prefix={{ controlplane_network_prefix }}
# gateway={{ controlplane_network_gateway }}
{%   if controlplane_bastion_as_dns %}
# dns1={{ bastion_controlplane_ip }}
{%   else %}
# dns1={{ labs[lab]['dns'][0] }}
# dns2={{ labs[lab]['dns'][1] | default('') }}
{%   endif %}
{% else %}
lab_interface={{ controlplane_lab_interface }}
network_interface={{ controlplane_network_interface }}
network_prefix={{ controlplane_network_prefix }}
gateway={{ controlplane_network_gateway }}
{%   if controlplane_bastion_as_dns %}
dns1={{ bastion_controlplane_ip }}
{%   else %}
dns1={{ labs[lab]['dns'][0] }}
dns2={{ labs[lab]['dns'][1] | default('') }}
{%   endif %}
{% endif %}

{% if hv_inventory %}
[hv]
{% for hv in ocpinventory_hv_nodes %}
{{ hv.pm_addr | replace('mgmt-','') }} bmc_address={{ hv.pm_addr }} vendor={{ hw_vendor[(hv.pm_addr.split('.')[0]).split('-')[-1]] }} ip={{ controlplane_network | ansible.utils.nthhost(loop.index + ocpinventory_worker_nodes|length + bm_worker_node_offset + hv_ip_offset) }} mac_address={{ hv.mac[hypervisor_nic_interface_idx] }} nic={{ hw_nic_name[lab][(hv.pm_addr.split('.')[0]).split('-')[-1]][hypervisor_nic_interface_idx] if lab == 'scalelab' }} disk2_enable={{ hv.disk2_enable }} disk2_device={{ hv.disk2_device }}
{% endfor %}

[hv:vars]
ansible_user=root
ansible_ssh_pass={{ hv_ssh_pass }}
base_domain={{ base_dns_name }}
machine_network={{ controlplane_network }}
bmc_user={{ bmc_user }}
bmc_password={{ bmc_password }}
network_prefix={{ controlplane_network_prefix }}
gateway={{ controlplane_network_gateway }}

[hv_vm]
# Unused

[hv_vm:vars]
# Unused

{% else %}
[hv]
# Set `hv_inventory: true` to populate

[hv:vars]
# Set `hv_inventory: true` to populate

[hv_vm]
# Set `hv_inventory: true` to populate

[hv_vm:vars]
# Set `hv_inventory: true` to populate

{% endif %}
