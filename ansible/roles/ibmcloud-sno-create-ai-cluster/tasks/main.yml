---
# ibmcloud-sno-create-ai-cluster tasks

- name: Create SNO cluster
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v1/clusters"
    method: POST
    body_format: json
    status_code: [201]
    return_content: true
    body: {
        "name": "{{ hostvars[item].inventory_hostname }}",
        "openshift_version": "{{ openshift_version }}",
        "high_availability_mode": "None",
        "base_dns_domain": "{{ base_dns_name }}",
        "cluster_network_cidr": "{{ cluster_network_cidr }}",
        "cluster_network_host_prefix": "{{ cluster_network_host_prefix }}",
        "service_network_cidr": "{{ service_network_cidr }}",
        "pull_secret": "{{ pull_secret | to_json }}",
        "ssh_public_key": "{{ lookup('file', ssh_public_key_file) }}",
    }
  loop: "{{ groups['sno'][:sno_node_count|int] }}"
  register: create_cluster_return

- name: Populate cluster ids
  when: cluster_type == "sno"
  set_fact:
    ai_cluster_ids: "{{ ai_cluster_ids|default({}) | combine( {item.item: {'cluster_name': item.item, 'cluster_id': item.json.id} } ) }}"
  loop: "{{ create_cluster_return.results }}"

- name: Update machine CIDR
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v1/clusters/{{ ai_cluster_ids[item].cluster_id }}"
    method: PATCH
    body_format: json
    status_code: [201]
    return_content: true
    body: {
        "machine_network_cidr": "{{ private_network_cidr }}"
    }
  with_items: "{{ ai_cluster_ids }}"

- name: Add entries in /etc/hosts
  blockinfile:
    path: "/etc/hosts"
    backup: true
    block: |
      {{ hostvars[item].private_address }} api.{{ hostvars[item].inventory_hostname }}.{{ base_dns_name }}
      {{ hostvars[item].private_address }} api-int.{{ hostvars[item].inventory_hostname }}.{{ base_dns_name }}
      {% for route in etc_hosts_ingress_routes %}
      {{ hostvars[item].private_address }} {{ route }}.apps.{{ hostvars[item].inventory_hostname }}.{{ base_dns_name }}
      {% endfor %}
    insertafter: "EOF"
    marker: "# {mark} {{ hostvars[item].inventory_hostname }} SNO CLUSTER MANAGED BLOCK"
  loop: "{{ groups['sno'][:sno_node_count|int] }}"

- name: Restart dnsmasq after /etc/hosts update
  systemd:
    state: restarted
    name: dnsmasq
  when: controlplane_bastion_as_dns

- name: Include custom manifests
  include_tasks: 01_manifest_task.yml
  with_items: "{{ ai_cluster_ids }}"
  loop_control:
    loop_var: outer_item
